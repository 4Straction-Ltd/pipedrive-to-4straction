/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPerformanceIndicatorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        int? PerformanceIndicatorAddPut (string _4SAPIAppID, PerformanceIndicator body);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PerformanceIndicatorAddPutWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body);
        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns></returns>
        void PerformanceIndicatorEditPut (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey);

        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PerformanceIndicatorEditPutWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey);
        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;PerformanceIndicator&gt;</returns>
        List<PerformanceIndicator> PerformanceIndicatorLoadAllGet (string _4SAPIAppID);

        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicator&gt;</returns>
        ApiResponse<List<PerformanceIndicator>> PerformanceIndicatorLoadAllGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// loadBubbleChartAvailabilityReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>PerformanceIndicatorAvailabilityReport</returns>
        PerformanceIndicatorAvailabilityReport PerformanceIndicatorLoadBubbleChartAvailabilityReportPut (string _4SAPIAppID, DashboardPageBlockBubbleChart body);

        /// <summary>
        /// loadBubbleChartAvailabilityReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of PerformanceIndicatorAvailabilityReport</returns>
        ApiResponse<PerformanceIndicatorAvailabilityReport> PerformanceIndicatorLoadBubbleChartAvailabilityReportPutWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body);
        /// <summary>
        /// loadBubbleChartReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>PerformanceIndicatorBubbleChartReport</returns>
        PerformanceIndicatorBubbleChartReport PerformanceIndicatorLoadBubbleChartReportPut (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null);

        /// <summary>
        /// loadBubbleChartReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>ApiResponse of PerformanceIndicatorBubbleChartReport</returns>
        ApiResponse<PerformanceIndicatorBubbleChartReport> PerformanceIndicatorLoadBubbleChartReportPutWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null);
        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>PerformanceIndicator</returns>
        PerformanceIndicator PerformanceIndicatorLoadGet (string _4SAPIAppID, int? primaryKey);

        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>ApiResponse of PerformanceIndicator</returns>
        ApiResponse<PerformanceIndicator> PerformanceIndicatorLoadGetWithHttpInfo (string _4SAPIAppID, int? primaryKey);
        /// <summary>
        /// loadInputDataReportForRange
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForRange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        List<PerformanceIndicatorInputDataReport> PerformanceIndicatorLoadInputDataReportForRangePut (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator);

        /// <summary>
        /// loadInputDataReportForRange
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForRange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForRangePutWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator);
        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        List<PerformanceIndicatorInputDataReport> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID);

        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetWithHttpInfo (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID);
        /// <summary>
        /// loadInputDataReportForYear
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        List<PerformanceIndicatorInputDataReport> PerformanceIndicatorLoadInputDataReportForYearPut (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear);

        /// <summary>
        /// loadInputDataReportForYear
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForYearPutWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear);
        /// <summary>
        /// loadRelationReportAll
        /// </summary>
        /// <remarks>
        /// loadRelationReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;PerformanceIndicatorRelationReport&gt;</returns>
        List<PerformanceIndicatorRelationReport> PerformanceIndicatorLoadRelationReportAllGet (string _4SAPIAppID);

        /// <summary>
        /// loadRelationReportAll
        /// </summary>
        /// <remarks>
        /// loadRelationReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorRelationReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorRelationReport>> PerformanceIndicatorLoadRelationReportAllGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// searchAvailabilityReport
        /// </summary>
        /// <remarks>
        /// searchAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>List&lt;PerformanceIndicatorAvailabilityReport&gt;</returns>
        List<PerformanceIndicatorAvailabilityReport> PerformanceIndicatorSearchAvailabilityReportPut (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body);

        /// <summary>
        /// searchAvailabilityReport
        /// </summary>
        /// <remarks>
        /// searchAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorAvailabilityReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorAvailabilityReport>> PerformanceIndicatorSearchAvailabilityReportPutWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body);
        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>List&lt;PerformanceIndicatorReport&gt;</returns>
        List<PerformanceIndicatorReport> PerformanceIndicatorSearchReportPut (string _4SAPIAppID, List<PerformanceIndicatorReport> body);

        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorReport>> PerformanceIndicatorSearchReportPutWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorReport> body);
        /// <summary>
        /// updateInputPeriodValues
        /// </summary>
        /// <remarks>
        /// updateInputPeriodValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns></returns>
        void PerformanceIndicatorUpdateInputPeriodValuesPut (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period);

        /// <summary>
        /// updateInputPeriodValues
        /// </summary>
        /// <remarks>
        /// updateInputPeriodValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PerformanceIndicatorUpdateInputPeriodValuesPutWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PerformanceIndicatorAddPutAsync (string _4SAPIAppID, PerformanceIndicator body);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PerformanceIndicatorAddPutAsyncWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body);
        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PerformanceIndicatorEditPutAsync (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey);

        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorEditPutAsyncWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey);
        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;PerformanceIndicator&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicator>> PerformanceIndicatorLoadAllGetAsync (string _4SAPIAppID);

        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicator&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicator>>> PerformanceIndicatorLoadAllGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// loadBubbleChartAvailabilityReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of PerformanceIndicatorAvailabilityReport</returns>
        System.Threading.Tasks.Task<PerformanceIndicatorAvailabilityReport> PerformanceIndicatorLoadBubbleChartAvailabilityReportPutAsync (string _4SAPIAppID, DashboardPageBlockBubbleChart body);

        /// <summary>
        /// loadBubbleChartAvailabilityReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (PerformanceIndicatorAvailabilityReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PerformanceIndicatorAvailabilityReport>> PerformanceIndicatorLoadBubbleChartAvailabilityReportPutAsyncWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body);
        /// <summary>
        /// loadBubbleChartReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>Task of PerformanceIndicatorBubbleChartReport</returns>
        System.Threading.Tasks.Task<PerformanceIndicatorBubbleChartReport> PerformanceIndicatorLoadBubbleChartReportPutAsync (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null);

        /// <summary>
        /// loadBubbleChartReport
        /// </summary>
        /// <remarks>
        /// loadBubbleChartReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PerformanceIndicatorBubbleChartReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PerformanceIndicatorBubbleChartReport>> PerformanceIndicatorLoadBubbleChartReportPutAsyncWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null);
        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of PerformanceIndicator</returns>
        System.Threading.Tasks.Task<PerformanceIndicator> PerformanceIndicatorLoadGetAsync (string _4SAPIAppID, int? primaryKey);

        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of ApiResponse (PerformanceIndicator)</returns>
        System.Threading.Tasks.Task<ApiResponse<PerformanceIndicator>> PerformanceIndicatorLoadGetAsyncWithHttpInfo (string _4SAPIAppID, int? primaryKey);
        /// <summary>
        /// loadInputDataReportForRange
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForRange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>Task of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForRangePutAsync (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator);

        /// <summary>
        /// loadInputDataReportForRange
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForRange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorInputDataReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorInputDataReport>>> PerformanceIndicatorLoadInputDataReportForRangePutAsyncWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator);
        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>Task of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetAsync (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID);

        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForSystemRegisterDataSource
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorInputDataReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorInputDataReport>>> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetAsyncWithHttpInfo (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID);
        /// <summary>
        /// loadInputDataReportForYear
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>Task of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForYearPutAsync (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear);

        /// <summary>
        /// loadInputDataReportForYear
        /// </summary>
        /// <remarks>
        /// loadInputDataReportForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorInputDataReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorInputDataReport>>> PerformanceIndicatorLoadInputDataReportForYearPutAsyncWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear);
        /// <summary>
        /// loadRelationReportAll
        /// </summary>
        /// <remarks>
        /// loadRelationReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;PerformanceIndicatorRelationReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorRelationReport>> PerformanceIndicatorLoadRelationReportAllGetAsync (string _4SAPIAppID);

        /// <summary>
        /// loadRelationReportAll
        /// </summary>
        /// <remarks>
        /// loadRelationReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorRelationReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorRelationReport>>> PerformanceIndicatorLoadRelationReportAllGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// searchAvailabilityReport
        /// </summary>
        /// <remarks>
        /// searchAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of List&lt;PerformanceIndicatorAvailabilityReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorAvailabilityReport>> PerformanceIndicatorSearchAvailabilityReportPutAsync (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body);

        /// <summary>
        /// searchAvailabilityReport
        /// </summary>
        /// <remarks>
        /// searchAvailabilityReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorAvailabilityReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorAvailabilityReport>>> PerformanceIndicatorSearchAvailabilityReportPutAsyncWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body);
        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of List&lt;PerformanceIndicatorReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorReport>> PerformanceIndicatorSearchReportPutAsync (string _4SAPIAppID, List<PerformanceIndicatorReport> body);

        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorReport>>> PerformanceIndicatorSearchReportPutAsyncWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorReport> body);
        /// <summary>
        /// updateInputPeriodValues
        /// </summary>
        /// <remarks>
        /// updateInputPeriodValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PerformanceIndicatorUpdateInputPeriodValuesPutAsync (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period);

        /// <summary>
        /// updateInputPeriodValues
        /// </summary>
        /// <remarks>
        /// updateInputPeriodValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorUpdateInputPeriodValuesPutAsyncWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PerformanceIndicatorApi : IPerformanceIndicatorApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PerformanceIndicatorApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PerformanceIndicatorApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        public int? PerformanceIndicatorAddPut (string _4SAPIAppID, PerformanceIndicator body)
        {
             ApiResponse<int?> localVarResponse = PerformanceIndicatorAddPutWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > PerformanceIndicatorAddPutWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorAddPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorAddPut");

            var localVarPath = "/PerformanceIndicator/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PerformanceIndicatorAddPutAsync (string _4SAPIAppID, PerformanceIndicator body)
        {
             ApiResponse<int?> localVarResponse = await PerformanceIndicatorAddPutAsyncWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PerformanceIndicatorAddPutAsyncWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorAddPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorAddPut");

            var localVarPath = "/PerformanceIndicator/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns></returns>
        public void PerformanceIndicatorEditPut (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey)
        {
             PerformanceIndicatorEditPutWithHttpInfo(_4SAPIAppID, body, primaryKey);
        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PerformanceIndicatorEditPutWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorEditPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorEditPut");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PerformanceIndicatorApi->PerformanceIndicatorEditPut");

            var localVarPath = "/PerformanceIndicator/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PerformanceIndicatorEditPutAsync (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey)
        {
             await PerformanceIndicatorEditPutAsyncWithHttpInfo(_4SAPIAppID, body, primaryKey);

        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorEditPutAsyncWithHttpInfo (string _4SAPIAppID, PerformanceIndicator body, int? primaryKey)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorEditPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorEditPut");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PerformanceIndicatorApi->PerformanceIndicatorEditPut");

            var localVarPath = "/PerformanceIndicator/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;PerformanceIndicator&gt;</returns>
        public List<PerformanceIndicator> PerformanceIndicatorLoadAllGet (string _4SAPIAppID)
        {
             ApiResponse<List<PerformanceIndicator>> localVarResponse = PerformanceIndicatorLoadAllGetWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicator&gt;</returns>
        public ApiResponse< List<PerformanceIndicator> > PerformanceIndicatorLoadAllGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadAllGet");

            var localVarPath = "/PerformanceIndicator/loadAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicator>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicator>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicator>)));
            
        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;PerformanceIndicator&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicator>> PerformanceIndicatorLoadAllGetAsync (string _4SAPIAppID)
        {
             ApiResponse<List<PerformanceIndicator>> localVarResponse = await PerformanceIndicatorLoadAllGetAsyncWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicator&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicator>>> PerformanceIndicatorLoadAllGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadAllGet");

            var localVarPath = "/PerformanceIndicator/loadAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicator>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicator>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicator>)));
            
        }

        /// <summary>
        /// loadBubbleChartAvailabilityReport loadBubbleChartAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>PerformanceIndicatorAvailabilityReport</returns>
        public PerformanceIndicatorAvailabilityReport PerformanceIndicatorLoadBubbleChartAvailabilityReportPut (string _4SAPIAppID, DashboardPageBlockBubbleChart body)
        {
             ApiResponse<PerformanceIndicatorAvailabilityReport> localVarResponse = PerformanceIndicatorLoadBubbleChartAvailabilityReportPutWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadBubbleChartAvailabilityReport loadBubbleChartAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of PerformanceIndicatorAvailabilityReport</returns>
        public ApiResponse< PerformanceIndicatorAvailabilityReport > PerformanceIndicatorLoadBubbleChartAvailabilityReportPutWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartAvailabilityReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartAvailabilityReportPut");

            var localVarPath = "/PerformanceIndicator/loadBubbleChartAvailabilityReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadBubbleChartAvailabilityReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformanceIndicatorAvailabilityReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformanceIndicatorAvailabilityReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformanceIndicatorAvailabilityReport)));
            
        }

        /// <summary>
        /// loadBubbleChartAvailabilityReport loadBubbleChartAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of PerformanceIndicatorAvailabilityReport</returns>
        public async System.Threading.Tasks.Task<PerformanceIndicatorAvailabilityReport> PerformanceIndicatorLoadBubbleChartAvailabilityReportPutAsync (string _4SAPIAppID, DashboardPageBlockBubbleChart body)
        {
             ApiResponse<PerformanceIndicatorAvailabilityReport> localVarResponse = await PerformanceIndicatorLoadBubbleChartAvailabilityReportPutAsyncWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadBubbleChartAvailabilityReport loadBubbleChartAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (PerformanceIndicatorAvailabilityReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PerformanceIndicatorAvailabilityReport>> PerformanceIndicatorLoadBubbleChartAvailabilityReportPutAsyncWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartAvailabilityReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartAvailabilityReportPut");

            var localVarPath = "/PerformanceIndicator/loadBubbleChartAvailabilityReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadBubbleChartAvailabilityReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformanceIndicatorAvailabilityReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformanceIndicatorAvailabilityReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformanceIndicatorAvailabilityReport)));
            
        }

        /// <summary>
        /// loadBubbleChartReport loadBubbleChartReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>PerformanceIndicatorBubbleChartReport</returns>
        public PerformanceIndicatorBubbleChartReport PerformanceIndicatorLoadBubbleChartReportPut (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null)
        {
             ApiResponse<PerformanceIndicatorBubbleChartReport> localVarResponse = PerformanceIndicatorLoadBubbleChartReportPutWithHttpInfo(_4SAPIAppID, body, period);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadBubbleChartReport loadBubbleChartReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>ApiResponse of PerformanceIndicatorBubbleChartReport</returns>
        public ApiResponse< PerformanceIndicatorBubbleChartReport > PerformanceIndicatorLoadBubbleChartReportPutWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartReportPut");

            var localVarPath = "/PerformanceIndicator/loadBubbleChartReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadBubbleChartReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformanceIndicatorBubbleChartReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformanceIndicatorBubbleChartReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformanceIndicatorBubbleChartReport)));
            
        }

        /// <summary>
        /// loadBubbleChartReport loadBubbleChartReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>Task of PerformanceIndicatorBubbleChartReport</returns>
        public async System.Threading.Tasks.Task<PerformanceIndicatorBubbleChartReport> PerformanceIndicatorLoadBubbleChartReportPutAsync (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null)
        {
             ApiResponse<PerformanceIndicatorBubbleChartReport> localVarResponse = await PerformanceIndicatorLoadBubbleChartReportPutAsyncWithHttpInfo(_4SAPIAppID, body, period);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadBubbleChartReport loadBubbleChartReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PerformanceIndicatorBubbleChartReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PerformanceIndicatorBubbleChartReport>> PerformanceIndicatorLoadBubbleChartReportPutAsyncWithHttpInfo (string _4SAPIAppID, DashboardPageBlockBubbleChart body, int? period = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadBubbleChartReportPut");

            var localVarPath = "/PerformanceIndicator/loadBubbleChartReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadBubbleChartReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformanceIndicatorBubbleChartReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformanceIndicatorBubbleChartReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformanceIndicatorBubbleChartReport)));
            
        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>PerformanceIndicator</returns>
        public PerformanceIndicator PerformanceIndicatorLoadGet (string _4SAPIAppID, int? primaryKey)
        {
             ApiResponse<PerformanceIndicator> localVarResponse = PerformanceIndicatorLoadGetWithHttpInfo(_4SAPIAppID, primaryKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>ApiResponse of PerformanceIndicator</returns>
        public ApiResponse< PerformanceIndicator > PerformanceIndicatorLoadGetWithHttpInfo (string _4SAPIAppID, int? primaryKey)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadGet");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadGet");

            var localVarPath = "/PerformanceIndicator/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformanceIndicator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformanceIndicator) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformanceIndicator)));
            
        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of PerformanceIndicator</returns>
        public async System.Threading.Tasks.Task<PerformanceIndicator> PerformanceIndicatorLoadGetAsync (string _4SAPIAppID, int? primaryKey)
        {
             ApiResponse<PerformanceIndicator> localVarResponse = await PerformanceIndicatorLoadGetAsyncWithHttpInfo(_4SAPIAppID, primaryKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of ApiResponse (PerformanceIndicator)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PerformanceIndicator>> PerformanceIndicatorLoadGetAsyncWithHttpInfo (string _4SAPIAppID, int? primaryKey)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadGet");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadGet");

            var localVarPath = "/PerformanceIndicator/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PerformanceIndicator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PerformanceIndicator) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PerformanceIndicator)));
            
        }

        /// <summary>
        /// loadInputDataReportForRange loadInputDataReportForRange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public List<PerformanceIndicatorInputDataReport> PerformanceIndicatorLoadInputDataReportForRangePut (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator)
        {
             ApiResponse<List<PerformanceIndicatorInputDataReport>> localVarResponse = PerformanceIndicatorLoadInputDataReportForRangePutWithHttpInfo(_4SAPIAppID, body, period, minYear, maxYear, targetIndicator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadInputDataReportForRange loadInputDataReportForRange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public ApiResponse< List<PerformanceIndicatorInputDataReport> > PerformanceIndicatorLoadInputDataReportForRangePutWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'minYear' is set
            if (minYear == null)
                throw new ApiException(400, "Missing required parameter 'minYear' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'maxYear' is set
            if (maxYear == null)
                throw new ApiException(400, "Missing required parameter 'maxYear' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'targetIndicator' is set
            if (targetIndicator == null)
                throw new ApiException(400, "Missing required parameter 'targetIndicator' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");

            var localVarPath = "/PerformanceIndicator/loadInputDataReportForRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (minYear != null) localVarQueryParams.Add("minYear", Configuration.ApiClient.ParameterToString(minYear)); // query parameter
            if (maxYear != null) localVarQueryParams.Add("maxYear", Configuration.ApiClient.ParameterToString(maxYear)); // query parameter
            if (targetIndicator != null) localVarQueryParams.Add("targetIndicator", Configuration.ApiClient.ParameterToString(targetIndicator)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadInputDataReportForRangePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorInputDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorInputDataReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorInputDataReport>)));
            
        }

        /// <summary>
        /// loadInputDataReportForRange loadInputDataReportForRange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>Task of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForRangePutAsync (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator)
        {
             ApiResponse<List<PerformanceIndicatorInputDataReport>> localVarResponse = await PerformanceIndicatorLoadInputDataReportForRangePutAsyncWithHttpInfo(_4SAPIAppID, body, period, minYear, maxYear, targetIndicator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadInputDataReportForRange loadInputDataReportForRange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="minYear">minYear</param>
        /// <param name="maxYear">maxYear</param>
        /// <param name="targetIndicator">targetIndicator</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorInputDataReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorInputDataReport>>> PerformanceIndicatorLoadInputDataReportForRangePutAsyncWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? minYear, int? maxYear, int? targetIndicator)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'minYear' is set
            if (minYear == null)
                throw new ApiException(400, "Missing required parameter 'minYear' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'maxYear' is set
            if (maxYear == null)
                throw new ApiException(400, "Missing required parameter 'maxYear' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");
            // verify the required parameter 'targetIndicator' is set
            if (targetIndicator == null)
                throw new ApiException(400, "Missing required parameter 'targetIndicator' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForRangePut");

            var localVarPath = "/PerformanceIndicator/loadInputDataReportForRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (minYear != null) localVarQueryParams.Add("minYear", Configuration.ApiClient.ParameterToString(minYear)); // query parameter
            if (maxYear != null) localVarQueryParams.Add("maxYear", Configuration.ApiClient.ParameterToString(maxYear)); // query parameter
            if (targetIndicator != null) localVarQueryParams.Add("targetIndicator", Configuration.ApiClient.ParameterToString(targetIndicator)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadInputDataReportForRangePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorInputDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorInputDataReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorInputDataReport>)));
            
        }

        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public List<PerformanceIndicatorInputDataReport> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID)
        {
             ApiResponse<List<PerformanceIndicatorInputDataReport>> localVarResponse = PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetWithHttpInfo(_4SAPIAppID, period, dataSource, startDate, dataSourceEntityID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public ApiResponse< List<PerformanceIndicatorInputDataReport> > PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetWithHttpInfo (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'dataSource' is set
            if (dataSource == null)
                throw new ApiException(400, "Missing required parameter 'dataSource' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'dataSourceEntityID' is set
            if (dataSourceEntityID == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceEntityID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");

            var localVarPath = "/PerformanceIndicator/loadInputDataReportForSystemRegisterDataSource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (dataSource != null) localVarQueryParams.Add("dataSource", Configuration.ApiClient.ParameterToString(dataSource)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (dataSourceEntityID != null) localVarQueryParams.Add("dataSourceEntityID", Configuration.ApiClient.ParameterToString(dataSourceEntityID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorInputDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorInputDataReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorInputDataReport>)));
            
        }

        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>Task of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetAsync (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID)
        {
             ApiResponse<List<PerformanceIndicatorInputDataReport>> localVarResponse = await PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetAsyncWithHttpInfo(_4SAPIAppID, period, dataSource, startDate, dataSourceEntityID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadInputDataReportForSystemRegisterDataSource loadInputDataReportForSystemRegisterDataSource
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="period">period</param>
        /// <param name="dataSource">dataSource</param>
        /// <param name="startDate">startDate</param>
        /// <param name="dataSourceEntityID">dataSourceEntityID</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorInputDataReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorInputDataReport>>> PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGetAsyncWithHttpInfo (string _4SAPIAppID, int? period, int? dataSource, DateTime? startDate, int? dataSourceEntityID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'dataSource' is set
            if (dataSource == null)
                throw new ApiException(400, "Missing required parameter 'dataSource' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");
            // verify the required parameter 'dataSourceEntityID' is set
            if (dataSourceEntityID == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceEntityID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet");

            var localVarPath = "/PerformanceIndicator/loadInputDataReportForSystemRegisterDataSource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (dataSource != null) localVarQueryParams.Add("dataSource", Configuration.ApiClient.ParameterToString(dataSource)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (dataSourceEntityID != null) localVarQueryParams.Add("dataSourceEntityID", Configuration.ApiClient.ParameterToString(dataSourceEntityID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadInputDataReportForSystemRegisterDataSourceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorInputDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorInputDataReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorInputDataReport>)));
            
        }

        /// <summary>
        /// loadInputDataReportForYear loadInputDataReportForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public List<PerformanceIndicatorInputDataReport> PerformanceIndicatorLoadInputDataReportForYearPut (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear)
        {
             ApiResponse<List<PerformanceIndicatorInputDataReport>> localVarResponse = PerformanceIndicatorLoadInputDataReportForYearPutWithHttpInfo(_4SAPIAppID, body, period, targetYear);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadInputDataReportForYear loadInputDataReportForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public ApiResponse< List<PerformanceIndicatorInputDataReport> > PerformanceIndicatorLoadInputDataReportForYearPutWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");
            // verify the required parameter 'targetYear' is set
            if (targetYear == null)
                throw new ApiException(400, "Missing required parameter 'targetYear' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");

            var localVarPath = "/PerformanceIndicator/loadInputDataReportForYear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (targetYear != null) localVarQueryParams.Add("targetYear", Configuration.ApiClient.ParameterToString(targetYear)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadInputDataReportForYearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorInputDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorInputDataReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorInputDataReport>)));
            
        }

        /// <summary>
        /// loadInputDataReportForYear loadInputDataReportForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>Task of List&lt;PerformanceIndicatorInputDataReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorInputDataReport>> PerformanceIndicatorLoadInputDataReportForYearPutAsync (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear)
        {
             ApiResponse<List<PerformanceIndicatorInputDataReport>> localVarResponse = await PerformanceIndicatorLoadInputDataReportForYearPutAsyncWithHttpInfo(_4SAPIAppID, body, period, targetYear);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadInputDataReportForYear loadInputDataReportForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <param name="targetYear">targetYear</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorInputDataReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorInputDataReport>>> PerformanceIndicatorLoadInputDataReportForYearPutAsyncWithHttpInfo (string _4SAPIAppID, CorporateStructureLink body, int? period, int? targetYear)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");
            // verify the required parameter 'targetYear' is set
            if (targetYear == null)
                throw new ApiException(400, "Missing required parameter 'targetYear' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadInputDataReportForYearPut");

            var localVarPath = "/PerformanceIndicator/loadInputDataReportForYear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (targetYear != null) localVarQueryParams.Add("targetYear", Configuration.ApiClient.ParameterToString(targetYear)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadInputDataReportForYearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorInputDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorInputDataReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorInputDataReport>)));
            
        }

        /// <summary>
        /// loadRelationReportAll loadRelationReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;PerformanceIndicatorRelationReport&gt;</returns>
        public List<PerformanceIndicatorRelationReport> PerformanceIndicatorLoadRelationReportAllGet (string _4SAPIAppID)
        {
             ApiResponse<List<PerformanceIndicatorRelationReport>> localVarResponse = PerformanceIndicatorLoadRelationReportAllGetWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadRelationReportAll loadRelationReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorRelationReport&gt;</returns>
        public ApiResponse< List<PerformanceIndicatorRelationReport> > PerformanceIndicatorLoadRelationReportAllGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadRelationReportAllGet");

            var localVarPath = "/PerformanceIndicator/loadRelationReportAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadRelationReportAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorRelationReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorRelationReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorRelationReport>)));
            
        }

        /// <summary>
        /// loadRelationReportAll loadRelationReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;PerformanceIndicatorRelationReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorRelationReport>> PerformanceIndicatorLoadRelationReportAllGetAsync (string _4SAPIAppID)
        {
             ApiResponse<List<PerformanceIndicatorRelationReport>> localVarResponse = await PerformanceIndicatorLoadRelationReportAllGetAsyncWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadRelationReportAll loadRelationReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorRelationReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorRelationReport>>> PerformanceIndicatorLoadRelationReportAllGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorLoadRelationReportAllGet");

            var localVarPath = "/PerformanceIndicator/loadRelationReportAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorLoadRelationReportAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorRelationReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorRelationReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorRelationReport>)));
            
        }

        /// <summary>
        /// searchAvailabilityReport searchAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>List&lt;PerformanceIndicatorAvailabilityReport&gt;</returns>
        public List<PerformanceIndicatorAvailabilityReport> PerformanceIndicatorSearchAvailabilityReportPut (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body)
        {
             ApiResponse<List<PerformanceIndicatorAvailabilityReport>> localVarResponse = PerformanceIndicatorSearchAvailabilityReportPutWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searchAvailabilityReport searchAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorAvailabilityReport&gt;</returns>
        public ApiResponse< List<PerformanceIndicatorAvailabilityReport> > PerformanceIndicatorSearchAvailabilityReportPutWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchAvailabilityReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchAvailabilityReportPut");

            var localVarPath = "/PerformanceIndicator/searchAvailabilityReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorSearchAvailabilityReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorAvailabilityReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorAvailabilityReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorAvailabilityReport>)));
            
        }

        /// <summary>
        /// searchAvailabilityReport searchAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of List&lt;PerformanceIndicatorAvailabilityReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorAvailabilityReport>> PerformanceIndicatorSearchAvailabilityReportPutAsync (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body)
        {
             ApiResponse<List<PerformanceIndicatorAvailabilityReport>> localVarResponse = await PerformanceIndicatorSearchAvailabilityReportPutAsyncWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searchAvailabilityReport searchAvailabilityReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorAvailabilityReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorAvailabilityReport>>> PerformanceIndicatorSearchAvailabilityReportPutAsyncWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorAvailabilityReport> body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchAvailabilityReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchAvailabilityReportPut");

            var localVarPath = "/PerformanceIndicator/searchAvailabilityReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorSearchAvailabilityReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorAvailabilityReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorAvailabilityReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorAvailabilityReport>)));
            
        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>List&lt;PerformanceIndicatorReport&gt;</returns>
        public List<PerformanceIndicatorReport> PerformanceIndicatorSearchReportPut (string _4SAPIAppID, List<PerformanceIndicatorReport> body)
        {
             ApiResponse<List<PerformanceIndicatorReport>> localVarResponse = PerformanceIndicatorSearchReportPutWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorReport&gt;</returns>
        public ApiResponse< List<PerformanceIndicatorReport> > PerformanceIndicatorSearchReportPutWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorReport> body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchReportPut");

            var localVarPath = "/PerformanceIndicator/searchReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorSearchReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorReport>)));
            
        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of List&lt;PerformanceIndicatorReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorReport>> PerformanceIndicatorSearchReportPutAsync (string _4SAPIAppID, List<PerformanceIndicatorReport> body)
        {
             ApiResponse<List<PerformanceIndicatorReport>> localVarResponse = await PerformanceIndicatorSearchReportPutAsyncWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorReport>>> PerformanceIndicatorSearchReportPutAsyncWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorReport> body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorSearchReportPut");

            var localVarPath = "/PerformanceIndicator/searchReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorSearchReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorReport>)));
            
        }

        /// <summary>
        /// updateInputPeriodValues updateInputPeriodValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns></returns>
        public void PerformanceIndicatorUpdateInputPeriodValuesPut (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period)
        {
             PerformanceIndicatorUpdateInputPeriodValuesPutWithHttpInfo(_4SAPIAppID, body, period);
        }

        /// <summary>
        /// updateInputPeriodValues updateInputPeriodValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PerformanceIndicatorUpdateInputPeriodValuesPutWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorUpdateInputPeriodValuesPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorUpdateInputPeriodValuesPut");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorUpdateInputPeriodValuesPut");

            var localVarPath = "/PerformanceIndicator/updateInputPeriodValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorUpdateInputPeriodValuesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// updateInputPeriodValues updateInputPeriodValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PerformanceIndicatorUpdateInputPeriodValuesPutAsync (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period)
        {
             await PerformanceIndicatorUpdateInputPeriodValuesPutAsyncWithHttpInfo(_4SAPIAppID, body, period);

        }

        /// <summary>
        /// updateInputPeriodValues updateInputPeriodValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="period">period</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorUpdateInputPeriodValuesPutAsyncWithHttpInfo (string _4SAPIAppID, List<PerformanceIndicatorInputDataReport> body, int? period)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorApi->PerformanceIndicatorUpdateInputPeriodValuesPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorApi->PerformanceIndicatorUpdateInputPeriodValuesPut");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PerformanceIndicatorApi->PerformanceIndicatorUpdateInputPeriodValuesPut");

            var localVarPath = "/PerformanceIndicator/updateInputPeriodValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (period != null) localVarQueryParams.Add("period", Configuration.ApiClient.ParameterToString(period)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorUpdateInputPeriodValuesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
