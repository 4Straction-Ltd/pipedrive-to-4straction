/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.575447164
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartnerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        int? PartnerAddPut (string _4SAPIAppID, Partner body);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PartnerAddPutWithHttpInfo (string _4SAPIAppID, Partner body);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns></returns>
        void PartnerDeleteGet (string _4SAPIAppID, int? primaryKey);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartnerDeleteGetWithHttpInfo (string _4SAPIAppID, int? primaryKey);
        /// <summary>
        /// dummy
        /// </summary>
        /// <remarks>
        /// dummy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>MarketPlayerBase</returns>
        MarketPlayerBase PartnerDummyGet (string _4SAPIAppID);

        /// <summary>
        /// dummy
        /// </summary>
        /// <remarks>
        /// dummy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of MarketPlayerBase</returns>
        ApiResponse<MarketPlayerBase> PartnerDummyGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        void PartnerEditPut (string _4SAPIAppID, Partner body);

        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartnerEditPutWithHttpInfo (string _4SAPIAppID, Partner body);
        /// <summary>
        /// getAutomatedSourcesPreview
        /// </summary>
        /// <remarks>
        /// getAutomatedSourcesPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>List&lt;AutomatedSourceGeneratedNews&gt;</returns>
        List<AutomatedSourceGeneratedNews> PartnerGetAutomatedSourcesPreviewGet (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate);

        /// <summary>
        /// getAutomatedSourcesPreview
        /// </summary>
        /// <remarks>
        /// getAutomatedSourcesPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>ApiResponse of List&lt;AutomatedSourceGeneratedNews&gt;</returns>
        ApiResponse<List<AutomatedSourceGeneratedNews>> PartnerGetAutomatedSourcesPreviewGetWithHttpInfo (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate);
        /// <summary>
        /// getNewsPreview
        /// </summary>
        /// <remarks>
        /// getNewsPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>List&lt;BingCognitiveItem&gt;</returns>
        List<BingCognitiveItem> PartnerGetNewsPreviewGet (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems);

        /// <summary>
        /// getNewsPreview
        /// </summary>
        /// <remarks>
        /// getNewsPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>ApiResponse of List&lt;BingCognitiveItem&gt;</returns>
        ApiResponse<List<BingCognitiveItem>> PartnerGetNewsPreviewGetWithHttpInfo (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems);
        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>List&lt;PartnerReport&gt;</returns>
        List<PartnerReport> PartnerLoadAllGet (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null);

        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;PartnerReport&gt;</returns>
        ApiResponse<List<PartnerReport>> PartnerLoadAllGetWithHttpInfo (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null);
        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>PartnerReport</returns>
        PartnerReport PartnerLoadGet (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null);

        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerReport</returns>
        ApiResponse<PartnerReport> PartnerLoadGetWithHttpInfo (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null);
        /// <summary>
        /// loadReportAll
        /// </summary>
        /// <remarks>
        /// loadReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>List&lt;PartnerReport&gt;</returns>
        List<PartnerReport> PartnerLoadReportAllGet (string _4SAPIAppID, int? maxCommentsCount = null);

        /// <summary>
        /// loadReportAll
        /// </summary>
        /// <remarks>
        /// loadReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;PartnerReport&gt;</returns>
        ApiResponse<List<PartnerReport>> PartnerLoadReportAllGetWithHttpInfo (string _4SAPIAppID, int? maxCommentsCount = null);
        /// <summary>
        /// loadReport
        /// </summary>
        /// <remarks>
        /// loadReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>PartnerReport</returns>
        PartnerReport PartnerLoadReportGet (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null);

        /// <summary>
        /// loadReport
        /// </summary>
        /// <remarks>
        /// loadReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerReport</returns>
        ApiResponse<PartnerReport> PartnerLoadReportGetWithHttpInfo (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null);
        /// <summary>
        /// processDailyNewsChangesForAll
        /// </summary>
        /// <remarks>
        /// processDailyNewsChangesForAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns></returns>
        void PartnerProcessDailyNewsChangesForAllGet (string _4SAPIAppID);

        /// <summary>
        /// processDailyNewsChangesForAll
        /// </summary>
        /// <remarks>
        /// processDailyNewsChangesForAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartnerProcessDailyNewsChangesForAllGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// processInitialNewsSearch
        /// </summary>
        /// <remarks>
        /// processInitialNewsSearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        void PartnerProcessInitialNewsSearchPut (string _4SAPIAppID, Partner body);

        /// <summary>
        /// processInitialNewsSearch
        /// </summary>
        /// <remarks>
        /// processInitialNewsSearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartnerProcessInitialNewsSearchPutWithHttpInfo (string _4SAPIAppID, Partner body);
        /// <summary>
        /// setupNewsSources
        /// </summary>
        /// <remarks>
        /// setupNewsSources
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        void PartnerSetupNewsSourcesPut (string _4SAPIAppID, Partner body);

        /// <summary>
        /// setupNewsSources
        /// </summary>
        /// <remarks>
        /// setupNewsSources
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartnerSetupNewsSourcesPutWithHttpInfo (string _4SAPIAppID, Partner body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PartnerAddPutAsync (string _4SAPIAppID, Partner body);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PartnerAddPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartnerDeleteGetAsync (string _4SAPIAppID, int? primaryKey);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartnerDeleteGetAsyncWithHttpInfo (string _4SAPIAppID, int? primaryKey);
        /// <summary>
        /// dummy
        /// </summary>
        /// <remarks>
        /// dummy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of MarketPlayerBase</returns>
        System.Threading.Tasks.Task<MarketPlayerBase> PartnerDummyGetAsync (string _4SAPIAppID);

        /// <summary>
        /// dummy
        /// </summary>
        /// <remarks>
        /// dummy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (MarketPlayerBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketPlayerBase>> PartnerDummyGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartnerEditPutAsync (string _4SAPIAppID, Partner body);

        /// <summary>
        /// edit
        /// </summary>
        /// <remarks>
        /// edit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartnerEditPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body);
        /// <summary>
        /// getAutomatedSourcesPreview
        /// </summary>
        /// <remarks>
        /// getAutomatedSourcesPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>Task of List&lt;AutomatedSourceGeneratedNews&gt;</returns>
        System.Threading.Tasks.Task<List<AutomatedSourceGeneratedNews>> PartnerGetAutomatedSourcesPreviewGetAsync (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate);

        /// <summary>
        /// getAutomatedSourcesPreview
        /// </summary>
        /// <remarks>
        /// getAutomatedSourcesPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>Task of ApiResponse (List&lt;AutomatedSourceGeneratedNews&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutomatedSourceGeneratedNews>>> PartnerGetAutomatedSourcesPreviewGetAsyncWithHttpInfo (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate);
        /// <summary>
        /// getNewsPreview
        /// </summary>
        /// <remarks>
        /// getNewsPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>Task of List&lt;BingCognitiveItem&gt;</returns>
        System.Threading.Tasks.Task<List<BingCognitiveItem>> PartnerGetNewsPreviewGetAsync (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems);

        /// <summary>
        /// getNewsPreview
        /// </summary>
        /// <remarks>
        /// getNewsPreview
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>Task of ApiResponse (List&lt;BingCognitiveItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BingCognitiveItem>>> PartnerGetNewsPreviewGetAsyncWithHttpInfo (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems);
        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of List&lt;PartnerReport&gt;</returns>
        System.Threading.Tasks.Task<List<PartnerReport>> PartnerLoadAllGetAsync (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null);

        /// <summary>
        /// loadAll
        /// </summary>
        /// <remarks>
        /// loadAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;PartnerReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PartnerReport>>> PartnerLoadAllGetAsyncWithHttpInfo (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null);
        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of PartnerReport</returns>
        System.Threading.Tasks.Task<PartnerReport> PartnerLoadGetAsync (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null);

        /// <summary>
        /// load
        /// </summary>
        /// <remarks>
        /// load
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerReport>> PartnerLoadGetAsyncWithHttpInfo (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null);
        /// <summary>
        /// loadReportAll
        /// </summary>
        /// <remarks>
        /// loadReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of List&lt;PartnerReport&gt;</returns>
        System.Threading.Tasks.Task<List<PartnerReport>> PartnerLoadReportAllGetAsync (string _4SAPIAppID, int? maxCommentsCount = null);

        /// <summary>
        /// loadReportAll
        /// </summary>
        /// <remarks>
        /// loadReportAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;PartnerReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PartnerReport>>> PartnerLoadReportAllGetAsyncWithHttpInfo (string _4SAPIAppID, int? maxCommentsCount = null);
        /// <summary>
        /// loadReport
        /// </summary>
        /// <remarks>
        /// loadReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of PartnerReport</returns>
        System.Threading.Tasks.Task<PartnerReport> PartnerLoadReportGetAsync (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null);

        /// <summary>
        /// loadReport
        /// </summary>
        /// <remarks>
        /// loadReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerReport>> PartnerLoadReportGetAsyncWithHttpInfo (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null);
        /// <summary>
        /// processDailyNewsChangesForAll
        /// </summary>
        /// <remarks>
        /// processDailyNewsChangesForAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartnerProcessDailyNewsChangesForAllGetAsync (string _4SAPIAppID);

        /// <summary>
        /// processDailyNewsChangesForAll
        /// </summary>
        /// <remarks>
        /// processDailyNewsChangesForAll
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartnerProcessDailyNewsChangesForAllGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// processInitialNewsSearch
        /// </summary>
        /// <remarks>
        /// processInitialNewsSearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartnerProcessInitialNewsSearchPutAsync (string _4SAPIAppID, Partner body);

        /// <summary>
        /// processInitialNewsSearch
        /// </summary>
        /// <remarks>
        /// processInitialNewsSearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartnerProcessInitialNewsSearchPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body);
        /// <summary>
        /// setupNewsSources
        /// </summary>
        /// <remarks>
        /// setupNewsSources
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartnerSetupNewsSourcesPutAsync (string _4SAPIAppID, Partner body);

        /// <summary>
        /// setupNewsSources
        /// </summary>
        /// <remarks>
        /// setupNewsSources
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartnerSetupNewsSourcesPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PartnerApi : IPartnerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PartnerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PartnerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        public int? PartnerAddPut (string _4SAPIAppID, Partner body)
        {
             ApiResponse<int?> localVarResponse = PartnerAddPutWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > PartnerAddPutWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerAddPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerAddPut");

            var localVarPath = "/Partner/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PartnerAddPutAsync (string _4SAPIAppID, Partner body)
        {
             ApiResponse<int?> localVarResponse = await PartnerAddPutAsyncWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PartnerAddPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerAddPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerAddPut");

            var localVarPath = "/Partner/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns></returns>
        public void PartnerDeleteGet (string _4SAPIAppID, int? primaryKey)
        {
             PartnerDeleteGetWithHttpInfo(_4SAPIAppID, primaryKey);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PartnerDeleteGetWithHttpInfo (string _4SAPIAppID, int? primaryKey)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerDeleteGet");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PartnerApi->PartnerDeleteGet");

            var localVarPath = "/Partner/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerDeleteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartnerDeleteGetAsync (string _4SAPIAppID, int? primaryKey)
        {
             await PartnerDeleteGetAsyncWithHttpInfo(_4SAPIAppID, primaryKey);

        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PartnerDeleteGetAsyncWithHttpInfo (string _4SAPIAppID, int? primaryKey)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerDeleteGet");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PartnerApi->PartnerDeleteGet");

            var localVarPath = "/Partner/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerDeleteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// dummy dummy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>MarketPlayerBase</returns>
        public MarketPlayerBase PartnerDummyGet (string _4SAPIAppID)
        {
             ApiResponse<MarketPlayerBase> localVarResponse = PartnerDummyGetWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// dummy dummy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of MarketPlayerBase</returns>
        public ApiResponse< MarketPlayerBase > PartnerDummyGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerDummyGet");

            var localVarPath = "/Partner/dummy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerDummyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketPlayerBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarketPlayerBase) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketPlayerBase)));
            
        }

        /// <summary>
        /// dummy dummy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of MarketPlayerBase</returns>
        public async System.Threading.Tasks.Task<MarketPlayerBase> PartnerDummyGetAsync (string _4SAPIAppID)
        {
             ApiResponse<MarketPlayerBase> localVarResponse = await PartnerDummyGetAsyncWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// dummy dummy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (MarketPlayerBase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketPlayerBase>> PartnerDummyGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerDummyGet");

            var localVarPath = "/Partner/dummy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerDummyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketPlayerBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarketPlayerBase) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketPlayerBase)));
            
        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        public void PartnerEditPut (string _4SAPIAppID, Partner body)
        {
             PartnerEditPutWithHttpInfo(_4SAPIAppID, body);
        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PartnerEditPutWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerEditPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerEditPut");

            var localVarPath = "/Partner/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartnerEditPutAsync (string _4SAPIAppID, Partner body)
        {
             await PartnerEditPutAsyncWithHttpInfo(_4SAPIAppID, body);

        }

        /// <summary>
        /// edit edit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PartnerEditPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerEditPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerEditPut");

            var localVarPath = "/Partner/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getAutomatedSourcesPreview getAutomatedSourcesPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>List&lt;AutomatedSourceGeneratedNews&gt;</returns>
        public List<AutomatedSourceGeneratedNews> PartnerGetAutomatedSourcesPreviewGet (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate)
        {
             ApiResponse<List<AutomatedSourceGeneratedNews>> localVarResponse = PartnerGetAutomatedSourcesPreviewGetWithHttpInfo(_4SAPIAppID, businessID, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAutomatedSourcesPreview getAutomatedSourcesPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>ApiResponse of List&lt;AutomatedSourceGeneratedNews&gt;</returns>
        public ApiResponse< List<AutomatedSourceGeneratedNews> > PartnerGetAutomatedSourcesPreviewGetWithHttpInfo (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");
            // verify the required parameter 'businessID' is set
            if (businessID == null)
                throw new ApiException(400, "Missing required parameter 'businessID' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");

            var localVarPath = "/Partner/getAutomatedSourcesPreview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (businessID != null) localVarQueryParams.Add("businessID", Configuration.ApiClient.ParameterToString(businessID)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerGetAutomatedSourcesPreviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AutomatedSourceGeneratedNews>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AutomatedSourceGeneratedNews>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AutomatedSourceGeneratedNews>)));
            
        }

        /// <summary>
        /// getAutomatedSourcesPreview getAutomatedSourcesPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>Task of List&lt;AutomatedSourceGeneratedNews&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutomatedSourceGeneratedNews>> PartnerGetAutomatedSourcesPreviewGetAsync (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate)
        {
             ApiResponse<List<AutomatedSourceGeneratedNews>> localVarResponse = await PartnerGetAutomatedSourcesPreviewGetAsyncWithHttpInfo(_4SAPIAppID, businessID, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAutomatedSourcesPreview getAutomatedSourcesPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="businessID">businessID</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <returns>Task of ApiResponse (List&lt;AutomatedSourceGeneratedNews&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AutomatedSourceGeneratedNews>>> PartnerGetAutomatedSourcesPreviewGetAsyncWithHttpInfo (string _4SAPIAppID, string businessID, DateTime? startDate, DateTime? endDate)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");
            // verify the required parameter 'businessID' is set
            if (businessID == null)
                throw new ApiException(400, "Missing required parameter 'businessID' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling PartnerApi->PartnerGetAutomatedSourcesPreviewGet");

            var localVarPath = "/Partner/getAutomatedSourcesPreview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (businessID != null) localVarQueryParams.Add("businessID", Configuration.ApiClient.ParameterToString(businessID)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerGetAutomatedSourcesPreviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AutomatedSourceGeneratedNews>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AutomatedSourceGeneratedNews>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AutomatedSourceGeneratedNews>)));
            
        }

        /// <summary>
        /// getNewsPreview getNewsPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>List&lt;BingCognitiveItem&gt;</returns>
        public List<BingCognitiveItem> PartnerGetNewsPreviewGet (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems)
        {
             ApiResponse<List<BingCognitiveItem>> localVarResponse = PartnerGetNewsPreviewGetWithHttpInfo(_4SAPIAppID, playerId, strictnessLevel, brandNames, newsSearch, webSearch, includeEnglishMarket, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getNewsPreview getNewsPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>ApiResponse of List&lt;BingCognitiveItem&gt;</returns>
        public ApiResponse< List<BingCognitiveItem> > PartnerGetNewsPreviewGetWithHttpInfo (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'strictnessLevel' is set
            if (strictnessLevel == null)
                throw new ApiException(400, "Missing required parameter 'strictnessLevel' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'brandNames' is set
            if (brandNames == null)
                throw new ApiException(400, "Missing required parameter 'brandNames' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'newsSearch' is set
            if (newsSearch == null)
                throw new ApiException(400, "Missing required parameter 'newsSearch' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'webSearch' is set
            if (webSearch == null)
                throw new ApiException(400, "Missing required parameter 'webSearch' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'includeEnglishMarket' is set
            if (includeEnglishMarket == null)
                throw new ApiException(400, "Missing required parameter 'includeEnglishMarket' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'maxItems' is set
            if (maxItems == null)
                throw new ApiException(400, "Missing required parameter 'maxItems' when calling PartnerApi->PartnerGetNewsPreviewGet");

            var localVarPath = "/Partner/getNewsPreview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (playerId != null) localVarQueryParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // query parameter
            if (strictnessLevel != null) localVarQueryParams.Add("strictnessLevel", Configuration.ApiClient.ParameterToString(strictnessLevel)); // query parameter
            if (brandNames != null) localVarQueryParams.Add("brandNames", Configuration.ApiClient.ParameterToString(brandNames)); // query parameter
            if (newsSearch != null) localVarQueryParams.Add("newsSearch", Configuration.ApiClient.ParameterToString(newsSearch)); // query parameter
            if (webSearch != null) localVarQueryParams.Add("webSearch", Configuration.ApiClient.ParameterToString(webSearch)); // query parameter
            if (includeEnglishMarket != null) localVarQueryParams.Add("includeEnglishMarket", Configuration.ApiClient.ParameterToString(includeEnglishMarket)); // query parameter
            if (maxItems != null) localVarQueryParams.Add("maxItems", Configuration.ApiClient.ParameterToString(maxItems)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerGetNewsPreviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BingCognitiveItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BingCognitiveItem>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BingCognitiveItem>)));
            
        }

        /// <summary>
        /// getNewsPreview getNewsPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>Task of List&lt;BingCognitiveItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<BingCognitiveItem>> PartnerGetNewsPreviewGetAsync (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems)
        {
             ApiResponse<List<BingCognitiveItem>> localVarResponse = await PartnerGetNewsPreviewGetAsyncWithHttpInfo(_4SAPIAppID, playerId, strictnessLevel, brandNames, newsSearch, webSearch, includeEnglishMarket, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getNewsPreview getNewsPreview
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="playerId">playerId</param>
        /// <param name="strictnessLevel">strictnessLevel</param>
        /// <param name="brandNames">brandNames</param>
        /// <param name="newsSearch">newsSearch</param>
        /// <param name="webSearch">webSearch</param>
        /// <param name="includeEnglishMarket">includeEnglishMarket</param>
        /// <param name="maxItems">maxItems</param>
        /// <returns>Task of ApiResponse (List&lt;BingCognitiveItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BingCognitiveItem>>> PartnerGetNewsPreviewGetAsyncWithHttpInfo (string _4SAPIAppID, int? playerId, int? strictnessLevel, string brandNames, bool? newsSearch, bool? webSearch, bool? includeEnglishMarket, int? maxItems)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'strictnessLevel' is set
            if (strictnessLevel == null)
                throw new ApiException(400, "Missing required parameter 'strictnessLevel' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'brandNames' is set
            if (brandNames == null)
                throw new ApiException(400, "Missing required parameter 'brandNames' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'newsSearch' is set
            if (newsSearch == null)
                throw new ApiException(400, "Missing required parameter 'newsSearch' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'webSearch' is set
            if (webSearch == null)
                throw new ApiException(400, "Missing required parameter 'webSearch' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'includeEnglishMarket' is set
            if (includeEnglishMarket == null)
                throw new ApiException(400, "Missing required parameter 'includeEnglishMarket' when calling PartnerApi->PartnerGetNewsPreviewGet");
            // verify the required parameter 'maxItems' is set
            if (maxItems == null)
                throw new ApiException(400, "Missing required parameter 'maxItems' when calling PartnerApi->PartnerGetNewsPreviewGet");

            var localVarPath = "/Partner/getNewsPreview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (playerId != null) localVarQueryParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // query parameter
            if (strictnessLevel != null) localVarQueryParams.Add("strictnessLevel", Configuration.ApiClient.ParameterToString(strictnessLevel)); // query parameter
            if (brandNames != null) localVarQueryParams.Add("brandNames", Configuration.ApiClient.ParameterToString(brandNames)); // query parameter
            if (newsSearch != null) localVarQueryParams.Add("newsSearch", Configuration.ApiClient.ParameterToString(newsSearch)); // query parameter
            if (webSearch != null) localVarQueryParams.Add("webSearch", Configuration.ApiClient.ParameterToString(webSearch)); // query parameter
            if (includeEnglishMarket != null) localVarQueryParams.Add("includeEnglishMarket", Configuration.ApiClient.ParameterToString(includeEnglishMarket)); // query parameter
            if (maxItems != null) localVarQueryParams.Add("maxItems", Configuration.ApiClient.ParameterToString(maxItems)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerGetNewsPreviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BingCognitiveItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BingCognitiveItem>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BingCognitiveItem>)));
            
        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>List&lt;PartnerReport&gt;</returns>
        public List<PartnerReport> PartnerLoadAllGet (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null)
        {
             ApiResponse<List<PartnerReport>> localVarResponse = PartnerLoadAllGetWithHttpInfo(_4SAPIAppID, sortColumn, maxCommentsCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;PartnerReport&gt;</returns>
        public ApiResponse< List<PartnerReport> > PartnerLoadAllGetWithHttpInfo (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadAllGet");

            var localVarPath = "/Partner/loadAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sortColumn != null) localVarQueryParams.Add("sortColumn", Configuration.ApiClient.ParameterToString(sortColumn)); // query parameter
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PartnerReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PartnerReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PartnerReport>)));
            
        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of List&lt;PartnerReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PartnerReport>> PartnerLoadAllGetAsync (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null)
        {
             ApiResponse<List<PartnerReport>> localVarResponse = await PartnerLoadAllGetAsyncWithHttpInfo(_4SAPIAppID, sortColumn, maxCommentsCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadAll loadAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="sortColumn">sortColumn (optional, default to )</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;PartnerReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PartnerReport>>> PartnerLoadAllGetAsyncWithHttpInfo (string _4SAPIAppID, string sortColumn = null, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadAllGet");

            var localVarPath = "/Partner/loadAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sortColumn != null) localVarQueryParams.Add("sortColumn", Configuration.ApiClient.ParameterToString(sortColumn)); // query parameter
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PartnerReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PartnerReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PartnerReport>)));
            
        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>PartnerReport</returns>
        public PartnerReport PartnerLoadGet (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null)
        {
             ApiResponse<PartnerReport> localVarResponse = PartnerLoadGetWithHttpInfo(_4SAPIAppID, entityID, maxCommentsCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerReport</returns>
        public ApiResponse< PartnerReport > PartnerLoadGetWithHttpInfo (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadGet");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling PartnerApi->PartnerLoadGet");

            var localVarPath = "/Partner/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entityID != null) localVarQueryParams.Add("entityID", Configuration.ApiClient.ParameterToString(entityID)); // query parameter
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartnerReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerReport)));
            
        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of PartnerReport</returns>
        public async System.Threading.Tasks.Task<PartnerReport> PartnerLoadGetAsync (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null)
        {
             ApiResponse<PartnerReport> localVarResponse = await PartnerLoadGetAsyncWithHttpInfo(_4SAPIAppID, entityID, maxCommentsCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load load
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="entityID">entityID</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartnerReport>> PartnerLoadGetAsyncWithHttpInfo (string _4SAPIAppID, int? entityID, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadGet");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling PartnerApi->PartnerLoadGet");

            var localVarPath = "/Partner/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entityID != null) localVarQueryParams.Add("entityID", Configuration.ApiClient.ParameterToString(entityID)); // query parameter
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartnerReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerReport)));
            
        }

        /// <summary>
        /// loadReportAll loadReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>List&lt;PartnerReport&gt;</returns>
        public List<PartnerReport> PartnerLoadReportAllGet (string _4SAPIAppID, int? maxCommentsCount = null)
        {
             ApiResponse<List<PartnerReport>> localVarResponse = PartnerLoadReportAllGetWithHttpInfo(_4SAPIAppID, maxCommentsCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadReportAll loadReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;PartnerReport&gt;</returns>
        public ApiResponse< List<PartnerReport> > PartnerLoadReportAllGetWithHttpInfo (string _4SAPIAppID, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadReportAllGet");

            var localVarPath = "/Partner/loadReportAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadReportAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PartnerReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PartnerReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PartnerReport>)));
            
        }

        /// <summary>
        /// loadReportAll loadReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of List&lt;PartnerReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PartnerReport>> PartnerLoadReportAllGetAsync (string _4SAPIAppID, int? maxCommentsCount = null)
        {
             ApiResponse<List<PartnerReport>> localVarResponse = await PartnerLoadReportAllGetAsyncWithHttpInfo(_4SAPIAppID, maxCommentsCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadReportAll loadReportAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;PartnerReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PartnerReport>>> PartnerLoadReportAllGetAsyncWithHttpInfo (string _4SAPIAppID, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadReportAllGet");

            var localVarPath = "/Partner/loadReportAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadReportAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PartnerReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PartnerReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PartnerReport>)));
            
        }

        /// <summary>
        /// loadReport loadReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>PartnerReport</returns>
        public PartnerReport PartnerLoadReportGet (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null)
        {
             ApiResponse<PartnerReport> localVarResponse = PartnerLoadReportGetWithHttpInfo(_4SAPIAppID, primaryKey, maxCommentsCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadReport loadReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerReport</returns>
        public ApiResponse< PartnerReport > PartnerLoadReportGetWithHttpInfo (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadReportGet");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PartnerApi->PartnerLoadReportGet");

            var localVarPath = "/Partner/loadReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartnerReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerReport)));
            
        }

        /// <summary>
        /// loadReport loadReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of PartnerReport</returns>
        public async System.Threading.Tasks.Task<PartnerReport> PartnerLoadReportGetAsync (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null)
        {
             ApiResponse<PartnerReport> localVarResponse = await PartnerLoadReportGetAsyncWithHttpInfo(_4SAPIAppID, primaryKey, maxCommentsCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadReport loadReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="primaryKey">primaryKey</param>
        /// <param name="maxCommentsCount">maxCommentsCount (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartnerReport>> PartnerLoadReportGetAsyncWithHttpInfo (string _4SAPIAppID, int? primaryKey, int? maxCommentsCount = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerLoadReportGet");
            // verify the required parameter 'primaryKey' is set
            if (primaryKey == null)
                throw new ApiException(400, "Missing required parameter 'primaryKey' when calling PartnerApi->PartnerLoadReportGet");

            var localVarPath = "/Partner/loadReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (primaryKey != null) localVarQueryParams.Add("primaryKey", Configuration.ApiClient.ParameterToString(primaryKey)); // query parameter
            if (maxCommentsCount != null) localVarQueryParams.Add("maxCommentsCount", Configuration.ApiClient.ParameterToString(maxCommentsCount)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerLoadReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartnerReport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerReport)));
            
        }

        /// <summary>
        /// processDailyNewsChangesForAll processDailyNewsChangesForAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns></returns>
        public void PartnerProcessDailyNewsChangesForAllGet (string _4SAPIAppID)
        {
             PartnerProcessDailyNewsChangesForAllGetWithHttpInfo(_4SAPIAppID);
        }

        /// <summary>
        /// processDailyNewsChangesForAll processDailyNewsChangesForAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PartnerProcessDailyNewsChangesForAllGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerProcessDailyNewsChangesForAllGet");

            var localVarPath = "/Partner/processDailyNewsChangesForAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerProcessDailyNewsChangesForAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// processDailyNewsChangesForAll processDailyNewsChangesForAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartnerProcessDailyNewsChangesForAllGetAsync (string _4SAPIAppID)
        {
             await PartnerProcessDailyNewsChangesForAllGetAsyncWithHttpInfo(_4SAPIAppID);

        }

        /// <summary>
        /// processDailyNewsChangesForAll processDailyNewsChangesForAll
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PartnerProcessDailyNewsChangesForAllGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerProcessDailyNewsChangesForAllGet");

            var localVarPath = "/Partner/processDailyNewsChangesForAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerProcessDailyNewsChangesForAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// processInitialNewsSearch processInitialNewsSearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        public void PartnerProcessInitialNewsSearchPut (string _4SAPIAppID, Partner body)
        {
             PartnerProcessInitialNewsSearchPutWithHttpInfo(_4SAPIAppID, body);
        }

        /// <summary>
        /// processInitialNewsSearch processInitialNewsSearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PartnerProcessInitialNewsSearchPutWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerProcessInitialNewsSearchPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerProcessInitialNewsSearchPut");

            var localVarPath = "/Partner/processInitialNewsSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerProcessInitialNewsSearchPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// processInitialNewsSearch processInitialNewsSearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartnerProcessInitialNewsSearchPutAsync (string _4SAPIAppID, Partner body)
        {
             await PartnerProcessInitialNewsSearchPutAsyncWithHttpInfo(_4SAPIAppID, body);

        }

        /// <summary>
        /// processInitialNewsSearch processInitialNewsSearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PartnerProcessInitialNewsSearchPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerProcessInitialNewsSearchPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerProcessInitialNewsSearchPut");

            var localVarPath = "/Partner/processInitialNewsSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerProcessInitialNewsSearchPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// setupNewsSources setupNewsSources
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        public void PartnerSetupNewsSourcesPut (string _4SAPIAppID, Partner body)
        {
             PartnerSetupNewsSourcesPutWithHttpInfo(_4SAPIAppID, body);
        }

        /// <summary>
        /// setupNewsSources setupNewsSources
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PartnerSetupNewsSourcesPutWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerSetupNewsSourcesPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerSetupNewsSourcesPut");

            var localVarPath = "/Partner/setupNewsSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerSetupNewsSourcesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// setupNewsSources setupNewsSources
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartnerSetupNewsSourcesPutAsync (string _4SAPIAppID, Partner body)
        {
             await PartnerSetupNewsSourcesPutAsyncWithHttpInfo(_4SAPIAppID, body);

        }

        /// <summary>
        /// setupNewsSources setupNewsSources
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PartnerSetupNewsSourcesPutAsyncWithHttpInfo (string _4SAPIAppID, Partner body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PartnerApi->PartnerSetupNewsSourcesPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PartnerApi->PartnerSetupNewsSourcesPut");

            var localVarPath = "/Partner/setupNewsSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerSetupNewsSourcesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
