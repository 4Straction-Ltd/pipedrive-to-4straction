/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicator
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicator :  IEquatable<PerformanceIndicator>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicator" /> class.
        /// </summary>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="NameFI">reflection (default to &quot;&quot;).</param>
        /// <param name="NameEN">reflection (default to &quot;&quot;).</param>
        /// <param name="NameSE">reflection (default to &quot;&quot;).</param>
        /// <param name="PerformancePerspectiveGroupID">reflection (default to 0).</param>
        /// <param name="DefaultPeriodID">reflection (default to 0).</param>
        /// <param name="Formula">reflection (default to &quot;&quot;).</param>
        /// <param name="ValueDependencyRuleID">reflection (default to 0).</param>
        /// <param name="CollectProduct">reflection (default to 0).</param>
        /// <param name="CollectGeoArea">reflection (default to 0).</param>
        /// <param name="CollectLegalUnit">reflection (default to 0).</param>
        /// <param name="CollectFunction">reflection (default to 0).</param>
        /// <param name="DimensionBudget">reflection (default to 0).</param>
        /// <param name="DimensionForecast">reflection (default to 0).</param>
        /// <param name="DimensionGoal">reflection (default to 0).</param>
        /// <param name="CollectCustomer">reflection (default to 0).</param>
        /// <param name="CollectCompetitor">reflection (default to 0).</param>
        /// <param name="CollectSupplier">reflection (default to 0).</param>
        /// <param name="CollectPartner">reflection (default to 0).</param>
        /// <param name="CollectOtherPlayer">reflection (default to 0).</param>
        /// <param name="ID">reflection (default to 0).</param>
        public PerformanceIndicator(string Name = null, string NameFI = null, string NameEN = null, string NameSE = null, int? PerformancePerspectiveGroupID = null, int? DefaultPeriodID = null, string Formula = null, int? ValueDependencyRuleID = null, int? CollectProduct = null, int? CollectGeoArea = null, int? CollectLegalUnit = null, int? CollectFunction = null, int? DimensionBudget = null, int? DimensionForecast = null, int? DimensionGoal = null, int? CollectCustomer = null, int? CollectCompetitor = null, int? CollectSupplier = null, int? CollectPartner = null, int? CollectOtherPlayer = null, int? ID = null)
        {
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            // use default value if no "NameFI" provided
            if (NameFI == null)
            {
                this.NameFI = "";
            }
            else
            {
                this.NameFI = NameFI;
            }
            // use default value if no "NameEN" provided
            if (NameEN == null)
            {
                this.NameEN = "";
            }
            else
            {
                this.NameEN = NameEN;
            }
            // use default value if no "NameSE" provided
            if (NameSE == null)
            {
                this.NameSE = "";
            }
            else
            {
                this.NameSE = NameSE;
            }
            // use default value if no "PerformancePerspectiveGroupID" provided
            if (PerformancePerspectiveGroupID == null)
            {
                this.PerformancePerspectiveGroupID = 0;
            }
            else
            {
                this.PerformancePerspectiveGroupID = PerformancePerspectiveGroupID;
            }
            // use default value if no "DefaultPeriodID" provided
            if (DefaultPeriodID == null)
            {
                this.DefaultPeriodID = 0;
            }
            else
            {
                this.DefaultPeriodID = DefaultPeriodID;
            }
            // use default value if no "Formula" provided
            if (Formula == null)
            {
                this.Formula = "";
            }
            else
            {
                this.Formula = Formula;
            }
            // use default value if no "ValueDependencyRuleID" provided
            if (ValueDependencyRuleID == null)
            {
                this.ValueDependencyRuleID = 0;
            }
            else
            {
                this.ValueDependencyRuleID = ValueDependencyRuleID;
            }
            // use default value if no "CollectProduct" provided
            if (CollectProduct == null)
            {
                this.CollectProduct = 0;
            }
            else
            {
                this.CollectProduct = CollectProduct;
            }
            // use default value if no "CollectGeoArea" provided
            if (CollectGeoArea == null)
            {
                this.CollectGeoArea = 0;
            }
            else
            {
                this.CollectGeoArea = CollectGeoArea;
            }
            // use default value if no "CollectLegalUnit" provided
            if (CollectLegalUnit == null)
            {
                this.CollectLegalUnit = 0;
            }
            else
            {
                this.CollectLegalUnit = CollectLegalUnit;
            }
            // use default value if no "CollectFunction" provided
            if (CollectFunction == null)
            {
                this.CollectFunction = 0;
            }
            else
            {
                this.CollectFunction = CollectFunction;
            }
            // use default value if no "DimensionBudget" provided
            if (DimensionBudget == null)
            {
                this.DimensionBudget = 0;
            }
            else
            {
                this.DimensionBudget = DimensionBudget;
            }
            // use default value if no "DimensionForecast" provided
            if (DimensionForecast == null)
            {
                this.DimensionForecast = 0;
            }
            else
            {
                this.DimensionForecast = DimensionForecast;
            }
            // use default value if no "DimensionGoal" provided
            if (DimensionGoal == null)
            {
                this.DimensionGoal = 0;
            }
            else
            {
                this.DimensionGoal = DimensionGoal;
            }
            // use default value if no "CollectCustomer" provided
            if (CollectCustomer == null)
            {
                this.CollectCustomer = 0;
            }
            else
            {
                this.CollectCustomer = CollectCustomer;
            }
            // use default value if no "CollectCompetitor" provided
            if (CollectCompetitor == null)
            {
                this.CollectCompetitor = 0;
            }
            else
            {
                this.CollectCompetitor = CollectCompetitor;
            }
            // use default value if no "CollectSupplier" provided
            if (CollectSupplier == null)
            {
                this.CollectSupplier = 0;
            }
            else
            {
                this.CollectSupplier = CollectSupplier;
            }
            // use default value if no "CollectPartner" provided
            if (CollectPartner == null)
            {
                this.CollectPartner = 0;
            }
            else
            {
                this.CollectPartner = CollectPartner;
            }
            // use default value if no "CollectOtherPlayer" provided
            if (CollectOtherPlayer == null)
            {
                this.CollectOtherPlayer = 0;
            }
            else
            {
                this.CollectOtherPlayer = CollectOtherPlayer;
            }
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = 0;
            }
            else
            {
                this.ID = ID;
            }
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="NameFI", EmitDefaultValue=false)]
        public string NameFI { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="NameEN", EmitDefaultValue=false)]
        public string NameEN { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="NameSE", EmitDefaultValue=false)]
        public string NameSE { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="PerformancePerspectiveGroupID", EmitDefaultValue=false)]
        public int? PerformancePerspectiveGroupID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="DefaultPeriodID", EmitDefaultValue=false)]
        public int? DefaultPeriodID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Formula", EmitDefaultValue=false)]
        public string Formula { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ValueDependencyRuleID", EmitDefaultValue=false)]
        public int? ValueDependencyRuleID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectProduct", EmitDefaultValue=false)]
        public int? CollectProduct { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectGeoArea", EmitDefaultValue=false)]
        public int? CollectGeoArea { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectLegalUnit", EmitDefaultValue=false)]
        public int? CollectLegalUnit { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectFunction", EmitDefaultValue=false)]
        public int? CollectFunction { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="DimensionBudget", EmitDefaultValue=false)]
        public int? DimensionBudget { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="DimensionForecast", EmitDefaultValue=false)]
        public int? DimensionForecast { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="DimensionGoal", EmitDefaultValue=false)]
        public int? DimensionGoal { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectCustomer", EmitDefaultValue=false)]
        public int? CollectCustomer { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectCompetitor", EmitDefaultValue=false)]
        public int? CollectCompetitor { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectSupplier", EmitDefaultValue=false)]
        public int? CollectSupplier { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectPartner", EmitDefaultValue=false)]
        public int? CollectPartner { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CollectOtherPlayer", EmitDefaultValue=false)]
        public int? CollectOtherPlayer { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicator {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameFI: ").Append(NameFI).Append("\n");
            sb.Append("  NameEN: ").Append(NameEN).Append("\n");
            sb.Append("  NameSE: ").Append(NameSE).Append("\n");
            sb.Append("  PerformancePerspectiveGroupID: ").Append(PerformancePerspectiveGroupID).Append("\n");
            sb.Append("  DefaultPeriodID: ").Append(DefaultPeriodID).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  ValueDependencyRuleID: ").Append(ValueDependencyRuleID).Append("\n");
            sb.Append("  CollectProduct: ").Append(CollectProduct).Append("\n");
            sb.Append("  CollectGeoArea: ").Append(CollectGeoArea).Append("\n");
            sb.Append("  CollectLegalUnit: ").Append(CollectLegalUnit).Append("\n");
            sb.Append("  CollectFunction: ").Append(CollectFunction).Append("\n");
            sb.Append("  DimensionBudget: ").Append(DimensionBudget).Append("\n");
            sb.Append("  DimensionForecast: ").Append(DimensionForecast).Append("\n");
            sb.Append("  DimensionGoal: ").Append(DimensionGoal).Append("\n");
            sb.Append("  CollectCustomer: ").Append(CollectCustomer).Append("\n");
            sb.Append("  CollectCompetitor: ").Append(CollectCompetitor).Append("\n");
            sb.Append("  CollectSupplier: ").Append(CollectSupplier).Append("\n");
            sb.Append("  CollectPartner: ").Append(CollectPartner).Append("\n");
            sb.Append("  CollectOtherPlayer: ").Append(CollectOtherPlayer).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicator);
        }

        /// <summary>
        /// Returns true if PerformanceIndicator instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicator other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NameFI == other.NameFI ||
                    this.NameFI != null &&
                    this.NameFI.Equals(other.NameFI)
                ) && 
                (
                    this.NameEN == other.NameEN ||
                    this.NameEN != null &&
                    this.NameEN.Equals(other.NameEN)
                ) && 
                (
                    this.NameSE == other.NameSE ||
                    this.NameSE != null &&
                    this.NameSE.Equals(other.NameSE)
                ) && 
                (
                    this.PerformancePerspectiveGroupID == other.PerformancePerspectiveGroupID ||
                    this.PerformancePerspectiveGroupID != null &&
                    this.PerformancePerspectiveGroupID.Equals(other.PerformancePerspectiveGroupID)
                ) && 
                (
                    this.DefaultPeriodID == other.DefaultPeriodID ||
                    this.DefaultPeriodID != null &&
                    this.DefaultPeriodID.Equals(other.DefaultPeriodID)
                ) && 
                (
                    this.Formula == other.Formula ||
                    this.Formula != null &&
                    this.Formula.Equals(other.Formula)
                ) && 
                (
                    this.ValueDependencyRuleID == other.ValueDependencyRuleID ||
                    this.ValueDependencyRuleID != null &&
                    this.ValueDependencyRuleID.Equals(other.ValueDependencyRuleID)
                ) && 
                (
                    this.CollectProduct == other.CollectProduct ||
                    this.CollectProduct != null &&
                    this.CollectProduct.Equals(other.CollectProduct)
                ) && 
                (
                    this.CollectGeoArea == other.CollectGeoArea ||
                    this.CollectGeoArea != null &&
                    this.CollectGeoArea.Equals(other.CollectGeoArea)
                ) && 
                (
                    this.CollectLegalUnit == other.CollectLegalUnit ||
                    this.CollectLegalUnit != null &&
                    this.CollectLegalUnit.Equals(other.CollectLegalUnit)
                ) && 
                (
                    this.CollectFunction == other.CollectFunction ||
                    this.CollectFunction != null &&
                    this.CollectFunction.Equals(other.CollectFunction)
                ) && 
                (
                    this.DimensionBudget == other.DimensionBudget ||
                    this.DimensionBudget != null &&
                    this.DimensionBudget.Equals(other.DimensionBudget)
                ) && 
                (
                    this.DimensionForecast == other.DimensionForecast ||
                    this.DimensionForecast != null &&
                    this.DimensionForecast.Equals(other.DimensionForecast)
                ) && 
                (
                    this.DimensionGoal == other.DimensionGoal ||
                    this.DimensionGoal != null &&
                    this.DimensionGoal.Equals(other.DimensionGoal)
                ) && 
                (
                    this.CollectCustomer == other.CollectCustomer ||
                    this.CollectCustomer != null &&
                    this.CollectCustomer.Equals(other.CollectCustomer)
                ) && 
                (
                    this.CollectCompetitor == other.CollectCompetitor ||
                    this.CollectCompetitor != null &&
                    this.CollectCompetitor.Equals(other.CollectCompetitor)
                ) && 
                (
                    this.CollectSupplier == other.CollectSupplier ||
                    this.CollectSupplier != null &&
                    this.CollectSupplier.Equals(other.CollectSupplier)
                ) && 
                (
                    this.CollectPartner == other.CollectPartner ||
                    this.CollectPartner != null &&
                    this.CollectPartner.Equals(other.CollectPartner)
                ) && 
                (
                    this.CollectOtherPlayer == other.CollectOtherPlayer ||
                    this.CollectOtherPlayer != null &&
                    this.CollectOtherPlayer.Equals(other.CollectOtherPlayer)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NameFI != null)
                    hash = hash * 59 + this.NameFI.GetHashCode();
                if (this.NameEN != null)
                    hash = hash * 59 + this.NameEN.GetHashCode();
                if (this.NameSE != null)
                    hash = hash * 59 + this.NameSE.GetHashCode();
                if (this.PerformancePerspectiveGroupID != null)
                    hash = hash * 59 + this.PerformancePerspectiveGroupID.GetHashCode();
                if (this.DefaultPeriodID != null)
                    hash = hash * 59 + this.DefaultPeriodID.GetHashCode();
                if (this.Formula != null)
                    hash = hash * 59 + this.Formula.GetHashCode();
                if (this.ValueDependencyRuleID != null)
                    hash = hash * 59 + this.ValueDependencyRuleID.GetHashCode();
                if (this.CollectProduct != null)
                    hash = hash * 59 + this.CollectProduct.GetHashCode();
                if (this.CollectGeoArea != null)
                    hash = hash * 59 + this.CollectGeoArea.GetHashCode();
                if (this.CollectLegalUnit != null)
                    hash = hash * 59 + this.CollectLegalUnit.GetHashCode();
                if (this.CollectFunction != null)
                    hash = hash * 59 + this.CollectFunction.GetHashCode();
                if (this.DimensionBudget != null)
                    hash = hash * 59 + this.DimensionBudget.GetHashCode();
                if (this.DimensionForecast != null)
                    hash = hash * 59 + this.DimensionForecast.GetHashCode();
                if (this.DimensionGoal != null)
                    hash = hash * 59 + this.DimensionGoal.GetHashCode();
                if (this.CollectCustomer != null)
                    hash = hash * 59 + this.CollectCustomer.GetHashCode();
                if (this.CollectCompetitor != null)
                    hash = hash * 59 + this.CollectCompetitor.GetHashCode();
                if (this.CollectSupplier != null)
                    hash = hash * 59 + this.CollectSupplier.GetHashCode();
                if (this.CollectPartner != null)
                    hash = hash * 59 + this.CollectPartner.GetHashCode();
                if (this.CollectOtherPlayer != null)
                    hash = hash * 59 + this.CollectOtherPlayer.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                return hash;
            }
        }
    }

}
