/* 
 * ForStraction service API
 *
 * Lead your organisationï¿½s full potential to creating results
 *
 * OpenAPI spec version: 2.0.573622193
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserCompanyAccessReport
    /// </summary>
    [DataContract]
    public partial class UserCompanyAccessReport :  IEquatable<UserCompanyAccessReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCompanyAccessReport" /> class.
        /// </summary>
        /// <param name="CompanyName">reflection (default to &quot;&quot;).</param>
        /// <param name="CompanyID">reflection (default to 0).</param>
        /// <param name="UserID">reflection (default to 0).</param>
        /// <param name="Added">reflection.</param>
        /// <param name="IsUserAdministrator">reflection.</param>
        /// <param name="SystemUserTypeID">reflection.</param>
        /// <param name="ProfileID">reflection (default to 0).</param>
        /// <param name="ID">reflection (default to 0).</param>
        public UserCompanyAccessReport(string CompanyName = null, int? CompanyID = null, int? UserID = null, DateTime? Added = null, int? IsUserAdministrator = null, int? SystemUserTypeID = null, int? ProfileID = null, int? ID = null)
        {
            // use default value if no "CompanyName" provided
            if (CompanyName == null)
            {
                this.CompanyName = "";
            }
            else
            {
                this.CompanyName = CompanyName;
            }
            // use default value if no "CompanyID" provided
            if (CompanyID == null)
            {
                this.CompanyID = 0;
            }
            else
            {
                this.CompanyID = CompanyID;
            }
            // use default value if no "UserID" provided
            if (UserID == null)
            {
                this.UserID = 0;
            }
            else
            {
                this.UserID = UserID;
            }
            this.Added = Added;
            this.IsUserAdministrator = IsUserAdministrator;
            this.SystemUserTypeID = SystemUserTypeID;
            // use default value if no "ProfileID" provided
            if (ProfileID == null)
            {
                this.ProfileID = 0;
            }
            else
            {
                this.ProfileID = ProfileID;
            }
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = 0;
            }
            else
            {
                this.ID = ID;
            }
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CompanyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="CompanyID", EmitDefaultValue=false)]
        public int? CompanyID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="UserID", EmitDefaultValue=false)]
        public int? UserID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Added", EmitDefaultValue=false)]
        public DateTime? Added { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="IsUserAdministrator", EmitDefaultValue=false)]
        public int? IsUserAdministrator { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="SystemUserTypeID", EmitDefaultValue=false)]
        public int? SystemUserTypeID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ProfileID", EmitDefaultValue=false)]
        public int? ProfileID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCompanyAccessReport {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  IsUserAdministrator: ").Append(IsUserAdministrator).Append("\n");
            sb.Append("  SystemUserTypeID: ").Append(SystemUserTypeID).Append("\n");
            sb.Append("  ProfileID: ").Append(ProfileID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserCompanyAccessReport);
        }

        /// <summary>
        /// Returns true if UserCompanyAccessReport instances are equal
        /// </summary>
        /// <param name="other">Instance of UserCompanyAccessReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCompanyAccessReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyName == other.CompanyName ||
                    this.CompanyName != null &&
                    this.CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    this.CompanyID == other.CompanyID ||
                    this.CompanyID != null &&
                    this.CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    this.UserID == other.UserID ||
                    this.UserID != null &&
                    this.UserID.Equals(other.UserID)
                ) && 
                (
                    this.Added == other.Added ||
                    this.Added != null &&
                    this.Added.Equals(other.Added)
                ) && 
                (
                    this.IsUserAdministrator == other.IsUserAdministrator ||
                    this.IsUserAdministrator != null &&
                    this.IsUserAdministrator.Equals(other.IsUserAdministrator)
                ) && 
                (
                    this.SystemUserTypeID == other.SystemUserTypeID ||
                    this.SystemUserTypeID != null &&
                    this.SystemUserTypeID.Equals(other.SystemUserTypeID)
                ) && 
                (
                    this.ProfileID == other.ProfileID ||
                    this.ProfileID != null &&
                    this.ProfileID.Equals(other.ProfileID)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyName != null)
                    hash = hash * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyID != null)
                    hash = hash * 59 + this.CompanyID.GetHashCode();
                if (this.UserID != null)
                    hash = hash * 59 + this.UserID.GetHashCode();
                if (this.Added != null)
                    hash = hash * 59 + this.Added.GetHashCode();
                if (this.IsUserAdministrator != null)
                    hash = hash * 59 + this.IsUserAdministrator.GetHashCode();
                if (this.SystemUserTypeID != null)
                    hash = hash * 59 + this.SystemUserTypeID.GetHashCode();
                if (this.ProfileID != null)
                    hash = hash * 59 + this.ProfileID.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                return hash;
            }
        }
    }

}
