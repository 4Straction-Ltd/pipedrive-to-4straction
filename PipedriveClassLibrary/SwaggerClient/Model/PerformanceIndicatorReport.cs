/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicatorReport
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorReport :  IEquatable<PerformanceIndicatorReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorReport" /> class.
        /// </summary>
        /// <param name="ID">reflection (default to &quot;&quot;).</param>
        /// <param name="IndicatorID">reflection (default to 0).</param>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="PerformancePerspectiveGroupID">reflection (default to 0).</param>
        /// <param name="DataNatureID">reflection (default to 0).</param>
        /// <param name="Identifier">reflection (default to &quot;&quot;).</param>
        /// <param name="Formula">reflection (default to &quot;&quot;).</param>
        /// <param name="Period">reflection (default to 0).</param>
        /// <param name="CorporateStructureLink">CorporateStructureLink.</param>
        /// <param name="HasActual">reflection (default to false).</param>
        /// <param name="HasBudget">reflection (default to false).</param>
        /// <param name="HasForecast">reflection (default to false).</param>
        /// <param name="HasGoal">reflection (default to false).</param>
        /// <param name="LastActualUpdate">reflection.</param>
        /// <param name="Data">Data.</param>
        public PerformanceIndicatorReport(string ID = null, int? IndicatorID = null, string Name = null, int? PerformancePerspectiveGroupID = null, int? DataNatureID = null, string Identifier = null, string Formula = null, int? Period = null, CorporateStructureLink CorporateStructureLink = null, bool? HasActual = null, bool? HasBudget = null, bool? HasForecast = null, bool? HasGoal = null, DateTime? LastActualUpdate = null, List<PerformanceIndicatorDataReport> Data = null)
        {
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = "";
            }
            else
            {
                this.ID = ID;
            }
            // use default value if no "IndicatorID" provided
            if (IndicatorID == null)
            {
                this.IndicatorID = 0;
            }
            else
            {
                this.IndicatorID = IndicatorID;
            }
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            // use default value if no "PerformancePerspectiveGroupID" provided
            if (PerformancePerspectiveGroupID == null)
            {
                this.PerformancePerspectiveGroupID = 0;
            }
            else
            {
                this.PerformancePerspectiveGroupID = PerformancePerspectiveGroupID;
            }
            // use default value if no "DataNatureID" provided
            if (DataNatureID == null)
            {
                this.DataNatureID = 0;
            }
            else
            {
                this.DataNatureID = DataNatureID;
            }
            // use default value if no "Identifier" provided
            if (Identifier == null)
            {
                this.Identifier = "";
            }
            else
            {
                this.Identifier = Identifier;
            }
            // use default value if no "Formula" provided
            if (Formula == null)
            {
                this.Formula = "";
            }
            else
            {
                this.Formula = Formula;
            }
            // use default value if no "Period" provided
            if (Period == null)
            {
                this.Period = 0;
            }
            else
            {
                this.Period = Period;
            }
            this.CorporateStructureLink = CorporateStructureLink;
            // use default value if no "HasActual" provided
            if (HasActual == null)
            {
                this.HasActual = false;
            }
            else
            {
                this.HasActual = HasActual;
            }
            // use default value if no "HasBudget" provided
            if (HasBudget == null)
            {
                this.HasBudget = false;
            }
            else
            {
                this.HasBudget = HasBudget;
            }
            // use default value if no "HasForecast" provided
            if (HasForecast == null)
            {
                this.HasForecast = false;
            }
            else
            {
                this.HasForecast = HasForecast;
            }
            // use default value if no "HasGoal" provided
            if (HasGoal == null)
            {
                this.HasGoal = false;
            }
            else
            {
                this.HasGoal = HasGoal;
            }
            this.LastActualUpdate = LastActualUpdate;
            this.Data = Data;
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="IndicatorID", EmitDefaultValue=false)]
        public int? IndicatorID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="PerformancePerspectiveGroupID", EmitDefaultValue=false)]
        public int? PerformancePerspectiveGroupID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="DataNatureID", EmitDefaultValue=false)]
        public int? DataNatureID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Formula", EmitDefaultValue=false)]
        public string Formula { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public int? Period { get; set; }
        /// <summary>
        /// Gets or Sets CorporateStructureLink
        /// </summary>
        [DataMember(Name="CorporateStructureLink", EmitDefaultValue=false)]
        public CorporateStructureLink CorporateStructureLink { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="HasActual", EmitDefaultValue=false)]
        public bool? HasActual { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="HasBudget", EmitDefaultValue=false)]
        public bool? HasBudget { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="HasForecast", EmitDefaultValue=false)]
        public bool? HasForecast { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="HasGoal", EmitDefaultValue=false)]
        public bool? HasGoal { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="LastActualUpdate", EmitDefaultValue=false)]
        public DateTime? LastActualUpdate { get; set; }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="Data", EmitDefaultValue=false)]
        public List<PerformanceIndicatorDataReport> Data { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorReport {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IndicatorID: ").Append(IndicatorID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PerformancePerspectiveGroupID: ").Append(PerformancePerspectiveGroupID).Append("\n");
            sb.Append("  DataNatureID: ").Append(DataNatureID).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  CorporateStructureLink: ").Append(CorporateStructureLink).Append("\n");
            sb.Append("  HasActual: ").Append(HasActual).Append("\n");
            sb.Append("  HasBudget: ").Append(HasBudget).Append("\n");
            sb.Append("  HasForecast: ").Append(HasForecast).Append("\n");
            sb.Append("  HasGoal: ").Append(HasGoal).Append("\n");
            sb.Append("  LastActualUpdate: ").Append(LastActualUpdate).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorReport);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.IndicatorID == other.IndicatorID ||
                    this.IndicatorID != null &&
                    this.IndicatorID.Equals(other.IndicatorID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PerformancePerspectiveGroupID == other.PerformancePerspectiveGroupID ||
                    this.PerformancePerspectiveGroupID != null &&
                    this.PerformancePerspectiveGroupID.Equals(other.PerformancePerspectiveGroupID)
                ) && 
                (
                    this.DataNatureID == other.DataNatureID ||
                    this.DataNatureID != null &&
                    this.DataNatureID.Equals(other.DataNatureID)
                ) && 
                (
                    this.Identifier == other.Identifier ||
                    this.Identifier != null &&
                    this.Identifier.Equals(other.Identifier)
                ) && 
                (
                    this.Formula == other.Formula ||
                    this.Formula != null &&
                    this.Formula.Equals(other.Formula)
                ) && 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.CorporateStructureLink == other.CorporateStructureLink ||
                    this.CorporateStructureLink != null &&
                    this.CorporateStructureLink.Equals(other.CorporateStructureLink)
                ) && 
                (
                    this.HasActual == other.HasActual ||
                    this.HasActual != null &&
                    this.HasActual.Equals(other.HasActual)
                ) && 
                (
                    this.HasBudget == other.HasBudget ||
                    this.HasBudget != null &&
                    this.HasBudget.Equals(other.HasBudget)
                ) && 
                (
                    this.HasForecast == other.HasForecast ||
                    this.HasForecast != null &&
                    this.HasForecast.Equals(other.HasForecast)
                ) && 
                (
                    this.HasGoal == other.HasGoal ||
                    this.HasGoal != null &&
                    this.HasGoal.Equals(other.HasGoal)
                ) && 
                (
                    this.LastActualUpdate == other.LastActualUpdate ||
                    this.LastActualUpdate != null &&
                    this.LastActualUpdate.Equals(other.LastActualUpdate)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.IndicatorID != null)
                    hash = hash * 59 + this.IndicatorID.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PerformancePerspectiveGroupID != null)
                    hash = hash * 59 + this.PerformancePerspectiveGroupID.GetHashCode();
                if (this.DataNatureID != null)
                    hash = hash * 59 + this.DataNatureID.GetHashCode();
                if (this.Identifier != null)
                    hash = hash * 59 + this.Identifier.GetHashCode();
                if (this.Formula != null)
                    hash = hash * 59 + this.Formula.GetHashCode();
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.CorporateStructureLink != null)
                    hash = hash * 59 + this.CorporateStructureLink.GetHashCode();
                if (this.HasActual != null)
                    hash = hash * 59 + this.HasActual.GetHashCode();
                if (this.HasBudget != null)
                    hash = hash * 59 + this.HasBudget.GetHashCode();
                if (this.HasForecast != null)
                    hash = hash * 59 + this.HasForecast.GetHashCode();
                if (this.HasGoal != null)
                    hash = hash * 59 + this.HasGoal.GetHashCode();
                if (this.LastActualUpdate != null)
                    hash = hash * 59 + this.LastActualUpdate.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                return hash;
            }
        }
    }

}
