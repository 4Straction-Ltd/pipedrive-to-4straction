/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicatorBubbleChartReport
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorBubbleChartReport :  IEquatable<PerformanceIndicatorBubbleChartReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorBubbleChartReport" /> class.
        /// </summary>
        /// <param name="ID">reflection (default to &quot;&quot;).</param>
        /// <param name="BubbleChartID">reflection (default to 0).</param>
        /// <param name="XPositionIndicator">XPositionIndicator.</param>
        /// <param name="YPositionIndicator">YPositionIndicator.</param>
        /// <param name="SizeIndicator">SizeIndicator.</param>
        /// <param name="ColorIndicator">ColorIndicator.</param>
        /// <param name="Period">reflection (default to 0).</param>
        /// <param name="Data">Data.</param>
        public PerformanceIndicatorBubbleChartReport(string ID = null, int? BubbleChartID = null, PerformanceIndicator XPositionIndicator = null, PerformanceIndicator YPositionIndicator = null, PerformanceIndicator SizeIndicator = null, PerformanceIndicator ColorIndicator = null, int? Period = null, List<PerformanceIndicatorBubbleChartBubbleReport> Data = null)
        {
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = "";
            }
            else
            {
                this.ID = ID;
            }
            // use default value if no "BubbleChartID" provided
            if (BubbleChartID == null)
            {
                this.BubbleChartID = 0;
            }
            else
            {
                this.BubbleChartID = BubbleChartID;
            }
            this.XPositionIndicator = XPositionIndicator;
            this.YPositionIndicator = YPositionIndicator;
            this.SizeIndicator = SizeIndicator;
            this.ColorIndicator = ColorIndicator;
            // use default value if no "Period" provided
            if (Period == null)
            {
                this.Period = 0;
            }
            else
            {
                this.Period = Period;
            }
            this.Data = Data;
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="BubbleChartID", EmitDefaultValue=false)]
        public int? BubbleChartID { get; set; }
        /// <summary>
        /// Gets or Sets XPositionIndicator
        /// </summary>
        [DataMember(Name="XPositionIndicator", EmitDefaultValue=false)]
        public PerformanceIndicator XPositionIndicator { get; set; }
        /// <summary>
        /// Gets or Sets YPositionIndicator
        /// </summary>
        [DataMember(Name="YPositionIndicator", EmitDefaultValue=false)]
        public PerformanceIndicator YPositionIndicator { get; set; }
        /// <summary>
        /// Gets or Sets SizeIndicator
        /// </summary>
        [DataMember(Name="SizeIndicator", EmitDefaultValue=false)]
        public PerformanceIndicator SizeIndicator { get; set; }
        /// <summary>
        /// Gets or Sets ColorIndicator
        /// </summary>
        [DataMember(Name="ColorIndicator", EmitDefaultValue=false)]
        public PerformanceIndicator ColorIndicator { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public int? Period { get; set; }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="Data", EmitDefaultValue=false)]
        public List<PerformanceIndicatorBubbleChartBubbleReport> Data { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorBubbleChartReport {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  BubbleChartID: ").Append(BubbleChartID).Append("\n");
            sb.Append("  XPositionIndicator: ").Append(XPositionIndicator).Append("\n");
            sb.Append("  YPositionIndicator: ").Append(YPositionIndicator).Append("\n");
            sb.Append("  SizeIndicator: ").Append(SizeIndicator).Append("\n");
            sb.Append("  ColorIndicator: ").Append(ColorIndicator).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorBubbleChartReport);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorBubbleChartReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorBubbleChartReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorBubbleChartReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.BubbleChartID == other.BubbleChartID ||
                    this.BubbleChartID != null &&
                    this.BubbleChartID.Equals(other.BubbleChartID)
                ) && 
                (
                    this.XPositionIndicator == other.XPositionIndicator ||
                    this.XPositionIndicator != null &&
                    this.XPositionIndicator.Equals(other.XPositionIndicator)
                ) && 
                (
                    this.YPositionIndicator == other.YPositionIndicator ||
                    this.YPositionIndicator != null &&
                    this.YPositionIndicator.Equals(other.YPositionIndicator)
                ) && 
                (
                    this.SizeIndicator == other.SizeIndicator ||
                    this.SizeIndicator != null &&
                    this.SizeIndicator.Equals(other.SizeIndicator)
                ) && 
                (
                    this.ColorIndicator == other.ColorIndicator ||
                    this.ColorIndicator != null &&
                    this.ColorIndicator.Equals(other.ColorIndicator)
                ) && 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.BubbleChartID != null)
                    hash = hash * 59 + this.BubbleChartID.GetHashCode();
                if (this.XPositionIndicator != null)
                    hash = hash * 59 + this.XPositionIndicator.GetHashCode();
                if (this.YPositionIndicator != null)
                    hash = hash * 59 + this.YPositionIndicator.GetHashCode();
                if (this.SizeIndicator != null)
                    hash = hash * 59 + this.SizeIndicator.GetHashCode();
                if (this.ColorIndicator != null)
                    hash = hash * 59 + this.ColorIndicator.GetHashCode();
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                return hash;
            }
        }
    }

}
