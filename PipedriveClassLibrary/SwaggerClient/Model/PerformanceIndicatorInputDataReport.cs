/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicatorInputDataReport
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorInputDataReport :  IEquatable<PerformanceIndicatorInputDataReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorInputDataReport" /> class.
        /// </summary>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="PeriodDate">reflection (default to &quot;&quot;).</param>
        /// <param name="KeyPerformanceIndicatorID">reflection (default to 0).</param>
        /// <param name="Actual">reflection (default to 0.0).</param>
        /// <param name="Budget">reflection (default to 0.0).</param>
        /// <param name="Forecast">reflection (default to 0.0).</param>
        /// <param name="Goal">reflection (default to 0.0).</param>
        /// <param name="Comment">reflection (default to &quot;&quot;).</param>
        /// <param name="CorporateStructureLink">CorporateStructureLink.</param>
        /// <param name="ActualSourceID">reflection (default to 0).</param>
        /// <param name="BudgetSourceID">reflection (default to 0).</param>
        /// <param name="ID">reflection (default to 0).</param>
        public PerformanceIndicatorInputDataReport(string Name = null, string PeriodDate = null, int? KeyPerformanceIndicatorID = null, double? Actual = null, double? Budget = null, double? Forecast = null, double? Goal = null, string Comment = null, CorporateStructureLink CorporateStructureLink = null, int? ActualSourceID = null, int? BudgetSourceID = null, int? ID = null)
        {
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            // use default value if no "PeriodDate" provided
            if (PeriodDate == null)
            {
                this.PeriodDate = "";
            }
            else
            {
                this.PeriodDate = PeriodDate;
            }
            // use default value if no "KeyPerformanceIndicatorID" provided
            if (KeyPerformanceIndicatorID == null)
            {
                this.KeyPerformanceIndicatorID = 0;
            }
            else
            {
                this.KeyPerformanceIndicatorID = KeyPerformanceIndicatorID;
            }
            // use default value if no "Actual" provided
            if (Actual == null)
            {
                this.Actual = 0.0;
            }
            else
            {
                this.Actual = Actual;
            }
            // use default value if no "Budget" provided
            if (Budget == null)
            {
                this.Budget = 0.0;
            }
            else
            {
                this.Budget = Budget;
            }
            // use default value if no "Forecast" provided
            if (Forecast == null)
            {
                this.Forecast = 0.0;
            }
            else
            {
                this.Forecast = Forecast;
            }
            // use default value if no "Goal" provided
            if (Goal == null)
            {
                this.Goal = 0.0;
            }
            else
            {
                this.Goal = Goal;
            }
            // use default value if no "Comment" provided
            if (Comment == null)
            {
                this.Comment = "";
            }
            else
            {
                this.Comment = Comment;
            }
            this.CorporateStructureLink = CorporateStructureLink;
            // use default value if no "ActualSourceID" provided
            if (ActualSourceID == null)
            {
                this.ActualSourceID = 0;
            }
            else
            {
                this.ActualSourceID = ActualSourceID;
            }
            // use default value if no "BudgetSourceID" provided
            if (BudgetSourceID == null)
            {
                this.BudgetSourceID = 0;
            }
            else
            {
                this.BudgetSourceID = BudgetSourceID;
            }
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = 0;
            }
            else
            {
                this.ID = ID;
            }
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="PeriodDate", EmitDefaultValue=false)]
        public string PeriodDate { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="KeyPerformanceIndicatorID", EmitDefaultValue=false)]
        public int? KeyPerformanceIndicatorID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Actual", EmitDefaultValue=false)]
        public double? Actual { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Budget", EmitDefaultValue=false)]
        public double? Budget { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Forecast", EmitDefaultValue=false)]
        public double? Forecast { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Goal", EmitDefaultValue=false)]
        public double? Goal { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// Gets or Sets CorporateStructureLink
        /// </summary>
        [DataMember(Name="CorporateStructureLink", EmitDefaultValue=false)]
        public CorporateStructureLink CorporateStructureLink { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ActualSourceID", EmitDefaultValue=false)]
        public int? ActualSourceID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="BudgetSourceID", EmitDefaultValue=false)]
        public int? BudgetSourceID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorInputDataReport {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PeriodDate: ").Append(PeriodDate).Append("\n");
            sb.Append("  KeyPerformanceIndicatorID: ").Append(KeyPerformanceIndicatorID).Append("\n");
            sb.Append("  Actual: ").Append(Actual).Append("\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  Forecast: ").Append(Forecast).Append("\n");
            sb.Append("  Goal: ").Append(Goal).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CorporateStructureLink: ").Append(CorporateStructureLink).Append("\n");
            sb.Append("  ActualSourceID: ").Append(ActualSourceID).Append("\n");
            sb.Append("  BudgetSourceID: ").Append(BudgetSourceID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorInputDataReport);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorInputDataReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorInputDataReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorInputDataReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PeriodDate == other.PeriodDate ||
                    this.PeriodDate != null &&
                    this.PeriodDate.Equals(other.PeriodDate)
                ) && 
                (
                    this.KeyPerformanceIndicatorID == other.KeyPerformanceIndicatorID ||
                    this.KeyPerformanceIndicatorID != null &&
                    this.KeyPerformanceIndicatorID.Equals(other.KeyPerformanceIndicatorID)
                ) && 
                (
                    this.Actual == other.Actual ||
                    this.Actual != null &&
                    this.Actual.Equals(other.Actual)
                ) && 
                (
                    this.Budget == other.Budget ||
                    this.Budget != null &&
                    this.Budget.Equals(other.Budget)
                ) && 
                (
                    this.Forecast == other.Forecast ||
                    this.Forecast != null &&
                    this.Forecast.Equals(other.Forecast)
                ) && 
                (
                    this.Goal == other.Goal ||
                    this.Goal != null &&
                    this.Goal.Equals(other.Goal)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.CorporateStructureLink == other.CorporateStructureLink ||
                    this.CorporateStructureLink != null &&
                    this.CorporateStructureLink.Equals(other.CorporateStructureLink)
                ) && 
                (
                    this.ActualSourceID == other.ActualSourceID ||
                    this.ActualSourceID != null &&
                    this.ActualSourceID.Equals(other.ActualSourceID)
                ) && 
                (
                    this.BudgetSourceID == other.BudgetSourceID ||
                    this.BudgetSourceID != null &&
                    this.BudgetSourceID.Equals(other.BudgetSourceID)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PeriodDate != null)
                    hash = hash * 59 + this.PeriodDate.GetHashCode();
                if (this.KeyPerformanceIndicatorID != null)
                    hash = hash * 59 + this.KeyPerformanceIndicatorID.GetHashCode();
                if (this.Actual != null)
                    hash = hash * 59 + this.Actual.GetHashCode();
                if (this.Budget != null)
                    hash = hash * 59 + this.Budget.GetHashCode();
                if (this.Forecast != null)
                    hash = hash * 59 + this.Forecast.GetHashCode();
                if (this.Goal != null)
                    hash = hash * 59 + this.Goal.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.CorporateStructureLink != null)
                    hash = hash * 59 + this.CorporateStructureLink.GetHashCode();
                if (this.ActualSourceID != null)
                    hash = hash * 59 + this.ActualSourceID.GetHashCode();
                if (this.BudgetSourceID != null)
                    hash = hash * 59 + this.BudgetSourceID.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                return hash;
            }
        }
    }

}
