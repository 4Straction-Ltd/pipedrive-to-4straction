/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.582626909
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IntegrationPipedriveSettings
    /// </summary>
    [DataContract]
    public partial class IntegrationPipedriveSettings :  IEquatable<IntegrationPipedriveSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationPipedriveSettings" /> class.
        /// </summary>
        /// <param name="Added">reflection.</param>
        /// <param name="AddedBy">reflection (default to 0).</param>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="RootDomain">reflection (default to &quot;&quot;).</param>
        /// <param name="APIKey">reflection (default to &quot;&quot;).</param>
        /// <param name="ImportOpenDeals">reflection.</param>
        /// <param name="ImportActivities">reflection.</param>
        /// <param name="ImportActivitiesSyncUsers">reflection.</param>
        /// <param name="ImportOpenDealsIndicatorID">reflection.</param>
        /// <param name="ImportActivitiesIndicatorID">reflection.</param>
        /// <param name="CorporateStructureLink">CorporateStructureLink.</param>
        /// <param name="LastSyncTime">reflection.</param>
        /// <param name="ID">reflection (default to 0).</param>
        public IntegrationPipedriveSettings(DateTime? Added = null, int? AddedBy = null, string Name = null, string RootDomain = null, string APIKey = null, bool? ImportOpenDeals = null, bool? ImportActivities = null, bool? ImportActivitiesSyncUsers = null, int? ImportOpenDealsIndicatorID = null, int? ImportActivitiesIndicatorID = null, CorporateStructureLink CorporateStructureLink = null, DateTime? LastSyncTime = null, int? ID = null)
        {
            this.Added = Added;
            // use default value if no "AddedBy" provided
            if (AddedBy == null)
            {
                this.AddedBy = 0;
            }
            else
            {
                this.AddedBy = AddedBy;
            }
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            // use default value if no "RootDomain" provided
            if (RootDomain == null)
            {
                this.RootDomain = "";
            }
            else
            {
                this.RootDomain = RootDomain;
            }
            // use default value if no "APIKey" provided
            if (APIKey == null)
            {
                this.APIKey = "";
            }
            else
            {
                this.APIKey = APIKey;
            }
            this.ImportOpenDeals = ImportOpenDeals;
            this.ImportActivities = ImportActivities;
            this.ImportActivitiesSyncUsers = ImportActivitiesSyncUsers;
            this.ImportOpenDealsIndicatorID = ImportOpenDealsIndicatorID;
            this.ImportActivitiesIndicatorID = ImportActivitiesIndicatorID;
            this.CorporateStructureLink = CorporateStructureLink;
            this.LastSyncTime = LastSyncTime;
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = 0;
            }
            else
            {
                this.ID = ID;
            }
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Added", EmitDefaultValue=false)]
        public DateTime? Added { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="AddedBy", EmitDefaultValue=false)]
        public int? AddedBy { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="RootDomain", EmitDefaultValue=false)]
        public string RootDomain { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="APIKey", EmitDefaultValue=false)]
        public string APIKey { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ImportOpenDeals", EmitDefaultValue=false)]
        public bool? ImportOpenDeals { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ImportActivities", EmitDefaultValue=false)]
        public bool? ImportActivities { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ImportActivitiesSyncUsers", EmitDefaultValue=false)]
        public bool? ImportActivitiesSyncUsers { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ImportOpenDealsIndicatorID", EmitDefaultValue=false)]
        public int? ImportOpenDealsIndicatorID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ImportActivitiesIndicatorID", EmitDefaultValue=false)]
        public int? ImportActivitiesIndicatorID { get; set; }
        /// <summary>
        /// Gets or Sets CorporateStructureLink
        /// </summary>
        [DataMember(Name="CorporateStructureLink", EmitDefaultValue=false)]
        public CorporateStructureLink CorporateStructureLink { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="LastSyncTime", EmitDefaultValue=false)]
        public DateTime? LastSyncTime { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationPipedriveSettings {\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  AddedBy: ").Append(AddedBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RootDomain: ").Append(RootDomain).Append("\n");
            sb.Append("  APIKey: ").Append(APIKey).Append("\n");
            sb.Append("  ImportOpenDeals: ").Append(ImportOpenDeals).Append("\n");
            sb.Append("  ImportActivities: ").Append(ImportActivities).Append("\n");
            sb.Append("  ImportActivitiesSyncUsers: ").Append(ImportActivitiesSyncUsers).Append("\n");
            sb.Append("  ImportOpenDealsIndicatorID: ").Append(ImportOpenDealsIndicatorID).Append("\n");
            sb.Append("  ImportActivitiesIndicatorID: ").Append(ImportActivitiesIndicatorID).Append("\n");
            sb.Append("  CorporateStructureLink: ").Append(CorporateStructureLink).Append("\n");
            sb.Append("  LastSyncTime: ").Append(LastSyncTime).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IntegrationPipedriveSettings);
        }

        /// <summary>
        /// Returns true if IntegrationPipedriveSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of IntegrationPipedriveSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationPipedriveSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Added == other.Added ||
                    this.Added != null &&
                    this.Added.Equals(other.Added)
                ) && 
                (
                    this.AddedBy == other.AddedBy ||
                    this.AddedBy != null &&
                    this.AddedBy.Equals(other.AddedBy)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RootDomain == other.RootDomain ||
                    this.RootDomain != null &&
                    this.RootDomain.Equals(other.RootDomain)
                ) && 
                (
                    this.APIKey == other.APIKey ||
                    this.APIKey != null &&
                    this.APIKey.Equals(other.APIKey)
                ) && 
                (
                    this.ImportOpenDeals == other.ImportOpenDeals ||
                    this.ImportOpenDeals != null &&
                    this.ImportOpenDeals.Equals(other.ImportOpenDeals)
                ) && 
                (
                    this.ImportActivities == other.ImportActivities ||
                    this.ImportActivities != null &&
                    this.ImportActivities.Equals(other.ImportActivities)
                ) && 
                (
                    this.ImportActivitiesSyncUsers == other.ImportActivitiesSyncUsers ||
                    this.ImportActivitiesSyncUsers != null &&
                    this.ImportActivitiesSyncUsers.Equals(other.ImportActivitiesSyncUsers)
                ) && 
                (
                    this.ImportOpenDealsIndicatorID == other.ImportOpenDealsIndicatorID ||
                    this.ImportOpenDealsIndicatorID != null &&
                    this.ImportOpenDealsIndicatorID.Equals(other.ImportOpenDealsIndicatorID)
                ) && 
                (
                    this.ImportActivitiesIndicatorID == other.ImportActivitiesIndicatorID ||
                    this.ImportActivitiesIndicatorID != null &&
                    this.ImportActivitiesIndicatorID.Equals(other.ImportActivitiesIndicatorID)
                ) && 
                (
                    this.CorporateStructureLink == other.CorporateStructureLink ||
                    this.CorporateStructureLink != null &&
                    this.CorporateStructureLink.Equals(other.CorporateStructureLink)
                ) && 
                (
                    this.LastSyncTime == other.LastSyncTime ||
                    this.LastSyncTime != null &&
                    this.LastSyncTime.Equals(other.LastSyncTime)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Added != null)
                    hash = hash * 59 + this.Added.GetHashCode();
                if (this.AddedBy != null)
                    hash = hash * 59 + this.AddedBy.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RootDomain != null)
                    hash = hash * 59 + this.RootDomain.GetHashCode();
                if (this.APIKey != null)
                    hash = hash * 59 + this.APIKey.GetHashCode();
                if (this.ImportOpenDeals != null)
                    hash = hash * 59 + this.ImportOpenDeals.GetHashCode();
                if (this.ImportActivities != null)
                    hash = hash * 59 + this.ImportActivities.GetHashCode();
                if (this.ImportActivitiesSyncUsers != null)
                    hash = hash * 59 + this.ImportActivitiesSyncUsers.GetHashCode();
                if (this.ImportOpenDealsIndicatorID != null)
                    hash = hash * 59 + this.ImportOpenDealsIndicatorID.GetHashCode();
                if (this.ImportActivitiesIndicatorID != null)
                    hash = hash * 59 + this.ImportActivitiesIndicatorID.GetHashCode();
                if (this.CorporateStructureLink != null)
                    hash = hash * 59 + this.CorporateStructureLink.GetHashCode();
                if (this.LastSyncTime != null)
                    hash = hash * 59 + this.LastSyncTime.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                return hash;
            }
        }
    }

}
