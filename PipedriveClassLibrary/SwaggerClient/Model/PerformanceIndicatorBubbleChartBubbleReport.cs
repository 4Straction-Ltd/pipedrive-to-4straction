/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicatorBubbleChartBubbleReport
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorBubbleChartBubbleReport :  IEquatable<PerformanceIndicatorBubbleChartBubbleReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorBubbleChartBubbleReport" /> class.
        /// </summary>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="XValue">reflection.</param>
        /// <param name="YValue">reflection.</param>
        /// <param name="SizeValue">reflection.</param>
        /// <param name="ColorValue">reflection.</param>
        /// <param name="ID">reflection (default to 0).</param>
        public PerformanceIndicatorBubbleChartBubbleReport(string Name = null, double? XValue = null, double? YValue = null, double? SizeValue = null, double? ColorValue = null, int? ID = null)
        {
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            this.XValue = XValue;
            this.YValue = YValue;
            this.SizeValue = SizeValue;
            this.ColorValue = ColorValue;
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = 0;
            }
            else
            {
                this.ID = ID;
            }
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="XValue", EmitDefaultValue=false)]
        public double? XValue { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="YValue", EmitDefaultValue=false)]
        public double? YValue { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="SizeValue", EmitDefaultValue=false)]
        public double? SizeValue { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ColorValue", EmitDefaultValue=false)]
        public double? ColorValue { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorBubbleChartBubbleReport {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  XValue: ").Append(XValue).Append("\n");
            sb.Append("  YValue: ").Append(YValue).Append("\n");
            sb.Append("  SizeValue: ").Append(SizeValue).Append("\n");
            sb.Append("  ColorValue: ").Append(ColorValue).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorBubbleChartBubbleReport);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorBubbleChartBubbleReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorBubbleChartBubbleReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorBubbleChartBubbleReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.XValue == other.XValue ||
                    this.XValue != null &&
                    this.XValue.Equals(other.XValue)
                ) && 
                (
                    this.YValue == other.YValue ||
                    this.YValue != null &&
                    this.YValue.Equals(other.YValue)
                ) && 
                (
                    this.SizeValue == other.SizeValue ||
                    this.SizeValue != null &&
                    this.SizeValue.Equals(other.SizeValue)
                ) && 
                (
                    this.ColorValue == other.ColorValue ||
                    this.ColorValue != null &&
                    this.ColorValue.Equals(other.ColorValue)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.XValue != null)
                    hash = hash * 59 + this.XValue.GetHashCode();
                if (this.YValue != null)
                    hash = hash * 59 + this.YValue.GetHashCode();
                if (this.SizeValue != null)
                    hash = hash * 59 + this.SizeValue.GetHashCode();
                if (this.ColorValue != null)
                    hash = hash * 59 + this.ColorValue.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                return hash;
            }
        }
    }

}
