/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicatorAvailabilityReport
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorAvailabilityReport :  IEquatable<PerformanceIndicatorAvailabilityReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorAvailabilityReport" /> class.
        /// </summary>
        /// <param name="ID">reflection (default to &quot;&quot;).</param>
        /// <param name="IndicatorID">reflection (default to 0).</param>
        /// <param name="CorporateStructureLink">CorporateStructureLink.</param>
        /// <param name="ActualPeriods">ActualPeriods.</param>
        /// <param name="BudgetPeriods">BudgetPeriods.</param>
        /// <param name="ForecastPeriods">ForecastPeriods.</param>
        /// <param name="GoalPeriods">GoalPeriods.</param>
        public PerformanceIndicatorAvailabilityReport(string ID = null, int? IndicatorID = null, CorporateStructureLink CorporateStructureLink = null, List<int?> ActualPeriods = null, List<int?> BudgetPeriods = null, List<int?> ForecastPeriods = null, List<int?> GoalPeriods = null)
        {
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = "";
            }
            else
            {
                this.ID = ID;
            }
            // use default value if no "IndicatorID" provided
            if (IndicatorID == null)
            {
                this.IndicatorID = 0;
            }
            else
            {
                this.IndicatorID = IndicatorID;
            }
            this.CorporateStructureLink = CorporateStructureLink;
            this.ActualPeriods = ActualPeriods;
            this.BudgetPeriods = BudgetPeriods;
            this.ForecastPeriods = ForecastPeriods;
            this.GoalPeriods = GoalPeriods;
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="IndicatorID", EmitDefaultValue=false)]
        public int? IndicatorID { get; set; }
        /// <summary>
        /// Gets or Sets CorporateStructureLink
        /// </summary>
        [DataMember(Name="CorporateStructureLink", EmitDefaultValue=false)]
        public CorporateStructureLink CorporateStructureLink { get; set; }
        /// <summary>
        /// Gets or Sets ActualPeriods
        /// </summary>
        [DataMember(Name="ActualPeriods", EmitDefaultValue=false)]
        public List<int?> ActualPeriods { get; set; }
        /// <summary>
        /// Gets or Sets BudgetPeriods
        /// </summary>
        [DataMember(Name="BudgetPeriods", EmitDefaultValue=false)]
        public List<int?> BudgetPeriods { get; set; }
        /// <summary>
        /// Gets or Sets ForecastPeriods
        /// </summary>
        [DataMember(Name="ForecastPeriods", EmitDefaultValue=false)]
        public List<int?> ForecastPeriods { get; set; }
        /// <summary>
        /// Gets or Sets GoalPeriods
        /// </summary>
        [DataMember(Name="GoalPeriods", EmitDefaultValue=false)]
        public List<int?> GoalPeriods { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorAvailabilityReport {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IndicatorID: ").Append(IndicatorID).Append("\n");
            sb.Append("  CorporateStructureLink: ").Append(CorporateStructureLink).Append("\n");
            sb.Append("  ActualPeriods: ").Append(ActualPeriods).Append("\n");
            sb.Append("  BudgetPeriods: ").Append(BudgetPeriods).Append("\n");
            sb.Append("  ForecastPeriods: ").Append(ForecastPeriods).Append("\n");
            sb.Append("  GoalPeriods: ").Append(GoalPeriods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorAvailabilityReport);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorAvailabilityReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorAvailabilityReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorAvailabilityReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.IndicatorID == other.IndicatorID ||
                    this.IndicatorID != null &&
                    this.IndicatorID.Equals(other.IndicatorID)
                ) && 
                (
                    this.CorporateStructureLink == other.CorporateStructureLink ||
                    this.CorporateStructureLink != null &&
                    this.CorporateStructureLink.Equals(other.CorporateStructureLink)
                ) && 
                (
                    this.ActualPeriods == other.ActualPeriods ||
                    this.ActualPeriods != null &&
                    this.ActualPeriods.SequenceEqual(other.ActualPeriods)
                ) && 
                (
                    this.BudgetPeriods == other.BudgetPeriods ||
                    this.BudgetPeriods != null &&
                    this.BudgetPeriods.SequenceEqual(other.BudgetPeriods)
                ) && 
                (
                    this.ForecastPeriods == other.ForecastPeriods ||
                    this.ForecastPeriods != null &&
                    this.ForecastPeriods.SequenceEqual(other.ForecastPeriods)
                ) && 
                (
                    this.GoalPeriods == other.GoalPeriods ||
                    this.GoalPeriods != null &&
                    this.GoalPeriods.SequenceEqual(other.GoalPeriods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.IndicatorID != null)
                    hash = hash * 59 + this.IndicatorID.GetHashCode();
                if (this.CorporateStructureLink != null)
                    hash = hash * 59 + this.CorporateStructureLink.GetHashCode();
                if (this.ActualPeriods != null)
                    hash = hash * 59 + this.ActualPeriods.GetHashCode();
                if (this.BudgetPeriods != null)
                    hash = hash * 59 + this.BudgetPeriods.GetHashCode();
                if (this.ForecastPeriods != null)
                    hash = hash * 59 + this.ForecastPeriods.GetHashCode();
                if (this.GoalPeriods != null)
                    hash = hash * 59 + this.GoalPeriods.GetHashCode();
                return hash;
            }
        }
    }

}
