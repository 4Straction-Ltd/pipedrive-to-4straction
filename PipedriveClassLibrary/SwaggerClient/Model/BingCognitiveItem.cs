/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.575447164
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BingCognitiveItem
    /// </summary>
    [DataContract]
    public partial class BingCognitiveItem :  IEquatable<BingCognitiveItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BingCognitiveItem" /> class.
        /// </summary>
        /// <param name="Keywords">reflection (default to &quot;&quot;).</param>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="ImageURI">reflection (default to &quot;&quot;).</param>
        /// <param name="Url">reflection (default to &quot;&quot;).</param>
        /// <param name="Description">reflection (default to &quot;&quot;).</param>
        /// <param name="Provider">reflection (default to &quot;&quot;).</param>
        /// <param name="Published">reflection.</param>
        public BingCognitiveItem(string Keywords = null, string Name = null, string ImageURI = null, string Url = null, string Description = null, string Provider = null, DateTime? Published = null)
        {
            // use default value if no "Keywords" provided
            if (Keywords == null)
            {
                this.Keywords = "";
            }
            else
            {
                this.Keywords = Keywords;
            }
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            // use default value if no "ImageURI" provided
            if (ImageURI == null)
            {
                this.ImageURI = "";
            }
            else
            {
                this.ImageURI = ImageURI;
            }
            // use default value if no "Url" provided
            if (Url == null)
            {
                this.Url = "";
            }
            else
            {
                this.Url = Url;
            }
            // use default value if no "Description" provided
            if (Description == null)
            {
                this.Description = "";
            }
            else
            {
                this.Description = Description;
            }
            // use default value if no "Provider" provided
            if (Provider == null)
            {
                this.Provider = "";
            }
            else
            {
                this.Provider = Provider;
            }
            this.Published = Published;
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Keywords", EmitDefaultValue=false)]
        public string Keywords { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ImageURI", EmitDefaultValue=false)]
        public string ImageURI { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Provider", EmitDefaultValue=false)]
        public string Provider { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Published", EmitDefaultValue=false)]
        public DateTime? Published { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BingCognitiveItem {\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImageURI: ").Append(ImageURI).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BingCognitiveItem);
        }

        /// <summary>
        /// Returns true if BingCognitiveItem instances are equal
        /// </summary>
        /// <param name="other">Instance of BingCognitiveItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BingCognitiveItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Keywords == other.Keywords ||
                    this.Keywords != null &&
                    this.Keywords.Equals(other.Keywords)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ImageURI == other.ImageURI ||
                    this.ImageURI != null &&
                    this.ImageURI.Equals(other.ImageURI)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Provider == other.Provider ||
                    this.Provider != null &&
                    this.Provider.Equals(other.Provider)
                ) && 
                (
                    this.Published == other.Published ||
                    this.Published != null &&
                    this.Published.Equals(other.Published)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Keywords != null)
                    hash = hash * 59 + this.Keywords.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ImageURI != null)
                    hash = hash * 59 + this.ImageURI.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Provider != null)
                    hash = hash * 59 + this.Provider.GetHashCode();
                if (this.Published != null)
                    hash = hash * 59 + this.Published.GetHashCode();
                return hash;
            }
        }
    }

}
