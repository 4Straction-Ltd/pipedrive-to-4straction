/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.575447164
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PartnerCommentPaginationSlice
    /// </summary>
    [DataContract]
    public partial class PartnerCommentPaginationSlice :  IEquatable<PartnerCommentPaginationSlice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerCommentPaginationSlice" /> class.
        /// </summary>
        /// <param name="Count">Count (default to 0).</param>
        /// <param name="TotalCount">TotalCount (default to 0).</param>
        /// <param name="Order">Order (default to 0).</param>
        /// <param name="NewCount">NewCount (default to 0).</param>
        /// <param name="NextID">NextID (default to 0).</param>
        /// <param name="Data">Data.</param>
        public PartnerCommentPaginationSlice(int? Count = null, int? TotalCount = null, int? Order = null, int? NewCount = null, int? NextID = null, List<PartnerComment> Data = null)
        {
            // use default value if no "Count" provided
            if (Count == null)
            {
                this.Count = 0;
            }
            else
            {
                this.Count = Count;
            }
            // use default value if no "TotalCount" provided
            if (TotalCount == null)
            {
                this.TotalCount = 0;
            }
            else
            {
                this.TotalCount = TotalCount;
            }
            // use default value if no "Order" provided
            if (Order == null)
            {
                this.Order = 0;
            }
            else
            {
                this.Order = Order;
            }
            // use default value if no "NewCount" provided
            if (NewCount == null)
            {
                this.NewCount = 0;
            }
            else
            {
                this.NewCount = NewCount;
            }
            // use default value if no "NextID" provided
            if (NextID == null)
            {
                this.NextID = 0;
            }
            else
            {
                this.NextID = NextID;
            }
            this.Data = Data;
        }
        
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="Count", EmitDefaultValue=false)]
        public int? Count { get; set; }
        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name="TotalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="Order", EmitDefaultValue=false)]
        public int? Order { get; set; }
        /// <summary>
        /// Gets or Sets NewCount
        /// </summary>
        [DataMember(Name="NewCount", EmitDefaultValue=false)]
        public int? NewCount { get; set; }
        /// <summary>
        /// Gets or Sets NextID
        /// </summary>
        [DataMember(Name="NextID", EmitDefaultValue=false)]
        public int? NextID { get; set; }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="Data", EmitDefaultValue=false)]
        public List<PartnerComment> Data { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartnerCommentPaginationSlice {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  NewCount: ").Append(NewCount).Append("\n");
            sb.Append("  NextID: ").Append(NextID).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PartnerCommentPaginationSlice);
        }

        /// <summary>
        /// Returns true if PartnerCommentPaginationSlice instances are equal
        /// </summary>
        /// <param name="other">Instance of PartnerCommentPaginationSlice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartnerCommentPaginationSlice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.TotalCount == other.TotalCount ||
                    this.TotalCount != null &&
                    this.TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.NewCount == other.NewCount ||
                    this.NewCount != null &&
                    this.NewCount.Equals(other.NewCount)
                ) && 
                (
                    this.NextID == other.NextID ||
                    this.NextID != null &&
                    this.NextID.Equals(other.NextID)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.TotalCount != null)
                    hash = hash * 59 + this.TotalCount.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.NewCount != null)
                    hash = hash * 59 + this.NewCount.GetHashCode();
                if (this.NextID != null)
                    hash = hash * 59 + this.NextID.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                return hash;
            }
        }
    }

}
