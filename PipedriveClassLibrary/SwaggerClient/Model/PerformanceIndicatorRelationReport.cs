/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.574845979
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceIndicatorRelationReport
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorRelationReport :  IEquatable<PerformanceIndicatorRelationReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorRelationReport" /> class.
        /// </summary>
        /// <param name="Name">reflection (default to &quot;&quot;).</param>
        /// <param name="Depth">reflection (default to 0).</param>
        /// <param name="PerformancePerspectiveGroupID">reflection (default to 0).</param>
        /// <param name="Formula">reflection (default to &quot;&quot;).</param>
        /// <param name="Dimensions">Dimensions.</param>
        /// <param name="UsedIn">UsedIn.</param>
        /// <param name="ID">reflection (default to 0).</param>
        public PerformanceIndicatorRelationReport(string Name = null, int? Depth = null, int? PerformancePerspectiveGroupID = null, string Formula = null, List<int?> Dimensions = null, List<int?> UsedIn = null, int? ID = null)
        {
            // use default value if no "Name" provided
            if (Name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = Name;
            }
            // use default value if no "Depth" provided
            if (Depth == null)
            {
                this.Depth = 0;
            }
            else
            {
                this.Depth = Depth;
            }
            // use default value if no "PerformancePerspectiveGroupID" provided
            if (PerformancePerspectiveGroupID == null)
            {
                this.PerformancePerspectiveGroupID = 0;
            }
            else
            {
                this.PerformancePerspectiveGroupID = PerformancePerspectiveGroupID;
            }
            // use default value if no "Formula" provided
            if (Formula == null)
            {
                this.Formula = "";
            }
            else
            {
                this.Formula = Formula;
            }
            this.Dimensions = Dimensions;
            this.UsedIn = UsedIn;
            // use default value if no "ID" provided
            if (ID == null)
            {
                this.ID = 0;
            }
            else
            {
                this.ID = ID;
            }
        }
        
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Depth", EmitDefaultValue=false)]
        public int? Depth { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="PerformancePerspectiveGroupID", EmitDefaultValue=false)]
        public int? PerformancePerspectiveGroupID { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="Formula", EmitDefaultValue=false)]
        public string Formula { get; set; }
        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="Dimensions", EmitDefaultValue=false)]
        public List<int?> Dimensions { get; set; }
        /// <summary>
        /// Gets or Sets UsedIn
        /// </summary>
        [DataMember(Name="UsedIn", EmitDefaultValue=false)]
        public List<int?> UsedIn { get; set; }
        /// <summary>
        /// reflection
        /// </summary>
        /// <value>reflection</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorRelationReport {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  PerformancePerspectiveGroupID: ").Append(PerformancePerspectiveGroupID).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  UsedIn: ").Append(UsedIn).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorRelationReport);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorRelationReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorRelationReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorRelationReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Depth == other.Depth ||
                    this.Depth != null &&
                    this.Depth.Equals(other.Depth)
                ) && 
                (
                    this.PerformancePerspectiveGroupID == other.PerformancePerspectiveGroupID ||
                    this.PerformancePerspectiveGroupID != null &&
                    this.PerformancePerspectiveGroupID.Equals(other.PerformancePerspectiveGroupID)
                ) && 
                (
                    this.Formula == other.Formula ||
                    this.Formula != null &&
                    this.Formula.Equals(other.Formula)
                ) && 
                (
                    this.Dimensions == other.Dimensions ||
                    this.Dimensions != null &&
                    this.Dimensions.SequenceEqual(other.Dimensions)
                ) && 
                (
                    this.UsedIn == other.UsedIn ||
                    this.UsedIn != null &&
                    this.UsedIn.SequenceEqual(other.UsedIn)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Depth != null)
                    hash = hash * 59 + this.Depth.GetHashCode();
                if (this.PerformancePerspectiveGroupID != null)
                    hash = hash * 59 + this.PerformancePerspectiveGroupID.GetHashCode();
                if (this.Formula != null)
                    hash = hash * 59 + this.Formula.GetHashCode();
                if (this.Dimensions != null)
                    hash = hash * 59 + this.Dimensions.GetHashCode();
                if (this.UsedIn != null)
                    hash = hash * 59 + this.UsedIn.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                return hash;
            }
        }
    }

}
