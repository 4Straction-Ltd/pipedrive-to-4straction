/* 
 * ForStraction service API
 *
 * Lead your organisationâ€™s full potential to creating results
 *
 * OpenAPI spec version: 2.0.573804662
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPerformanceIndicatorMonthDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// addMonthInCurrentYear
        /// </summary>
        /// <remarks>
        /// addMonthInCurrentYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        int? PerformanceIndicatorMonthDataAddMonthInCurrentYearPut(string _4SAPIAppID, PerformanceIndicatorMonthData body);

        /// <summary>
        /// addMonthInCurrentYear
        /// </summary>
        /// <remarks>
        /// addMonthInCurrentYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PerformanceIndicatorMonthDataAddMonthInCurrentYearPutWithHttpInfo(string _4SAPIAppID, PerformanceIndicatorMonthData body);
        /// <summary>
        /// loadCompetitorValuesForYear
        /// </summary>
        /// <remarks>
        /// loadCompetitorValuesForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>List&lt;PerformanceIndicatorMonthData&gt;</returns>
        List<PerformanceIndicatorMonthData> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID);

        /// <summary>
        /// loadCompetitorValuesForYear
        /// </summary>
        /// <remarks>
        /// loadCompetitorValuesForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorMonthData&gt;</returns>
        ApiResponse<List<PerformanceIndicatorMonthData>> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutWithHttpInfo(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID);
        /// <summary>
        /// mergeTargetValue
        /// </summary>
        /// <remarks>
        /// mergeTargetValue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns></returns>
        void PerformanceIndicatorMonthDataMergeTargetValuePut(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null);

        /// <summary>
        /// mergeTargetValue
        /// </summary>
        /// <remarks>
        /// mergeTargetValue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PerformanceIndicatorMonthDataMergeTargetValuePutWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null);
        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>List&lt;PerformanceIndicatorDataReport&gt;</returns>
        List<PerformanceIndicatorDataReport> PerformanceIndicatorMonthDataSearchReportPut(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID);

        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorDataReport&gt;</returns>
        ApiResponse<List<PerformanceIndicatorDataReport>> PerformanceIndicatorMonthDataSearchReportPutWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID);
        /// <summary>
        /// updateMonthValueColumn
        /// </summary>
        /// <remarks>
        /// updateMonthValueColumn
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns></returns>
        void PerformanceIndicatorMonthDataUpdateMonthValueColumnGet(string _4SAPIAppID, int? targetID, double? value, int? dimension);

        /// <summary>
        /// updateMonthValueColumn
        /// </summary>
        /// <remarks>
        /// updateMonthValueColumn
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PerformanceIndicatorMonthDataUpdateMonthValueColumnGetWithHttpInfo(string _4SAPIAppID, int? targetID, double? value, int? dimension);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// addMonthInCurrentYear
        /// </summary>
        /// <remarks>
        /// addMonthInCurrentYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PerformanceIndicatorMonthDataAddMonthInCurrentYearPutAsync(string _4SAPIAppID, PerformanceIndicatorMonthData body);

        /// <summary>
        /// addMonthInCurrentYear
        /// </summary>
        /// <remarks>
        /// addMonthInCurrentYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PerformanceIndicatorMonthDataAddMonthInCurrentYearPutAsyncWithHttpInfo(string _4SAPIAppID, PerformanceIndicatorMonthData body);
        /// <summary>
        /// loadCompetitorValuesForYear
        /// </summary>
        /// <remarks>
        /// loadCompetitorValuesForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>Task of List&lt;PerformanceIndicatorMonthData&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorMonthData>> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutAsync(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID);

        /// <summary>
        /// loadCompetitorValuesForYear
        /// </summary>
        /// <remarks>
        /// loadCompetitorValuesForYear
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorMonthData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorMonthData>>> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutAsyncWithHttpInfo(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID);
        /// <summary>
        /// mergeTargetValue
        /// </summary>
        /// <remarks>
        /// mergeTargetValue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PerformanceIndicatorMonthDataMergeTargetValuePutAsync(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null);

        /// <summary>
        /// mergeTargetValue
        /// </summary>
        /// <remarks>
        /// mergeTargetValue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorMonthDataMergeTargetValuePutAsyncWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null);
        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>Task of List&lt;PerformanceIndicatorDataReport&gt;</returns>
        System.Threading.Tasks.Task<List<PerformanceIndicatorDataReport>> PerformanceIndicatorMonthDataSearchReportPutAsync(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID);

        /// <summary>
        /// searchReport
        /// </summary>
        /// <remarks>
        /// searchReport
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorDataReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorDataReport>>> PerformanceIndicatorMonthDataSearchReportPutAsyncWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID);
        /// <summary>
        /// updateMonthValueColumn
        /// </summary>
        /// <remarks>
        /// updateMonthValueColumn
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PerformanceIndicatorMonthDataUpdateMonthValueColumnGetAsync(string _4SAPIAppID, int? targetID, double? value, int? dimension);

        /// <summary>
        /// updateMonthValueColumn
        /// </summary>
        /// <remarks>
        /// updateMonthValueColumn
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorMonthDataUpdateMonthValueColumnGetAsyncWithHttpInfo(string _4SAPIAppID, int? targetID, double? value, int? dimension);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PerformanceIndicatorMonthDataApi : IPerformanceIndicatorMonthDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorMonthDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PerformanceIndicatorMonthDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorMonthDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PerformanceIndicatorMonthDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// addMonthInCurrentYear addMonthInCurrentYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        public int? PerformanceIndicatorMonthDataAddMonthInCurrentYearPut(string _4SAPIAppID, PerformanceIndicatorMonthData body)
        {
            ApiResponse<int?> localVarResponse = PerformanceIndicatorMonthDataAddMonthInCurrentYearPutWithHttpInfo(_4SAPIAppID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// addMonthInCurrentYear addMonthInCurrentYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse<int?> PerformanceIndicatorMonthDataAddMonthInCurrentYearPutWithHttpInfo(string _4SAPIAppID, PerformanceIndicatorMonthData body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataAddMonthInCurrentYearPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataAddMonthInCurrentYearPut");

            var localVarPath = "/PerformanceIndicatorMonthData/addMonthInCurrentYear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataAddMonthInCurrentYearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?)Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));

        }

        /// <summary>
        /// addMonthInCurrentYear addMonthInCurrentYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PerformanceIndicatorMonthDataAddMonthInCurrentYearPutAsync(string _4SAPIAppID, PerformanceIndicatorMonthData body)
        {
            ApiResponse<int?> localVarResponse = await PerformanceIndicatorMonthDataAddMonthInCurrentYearPutAsyncWithHttpInfo(_4SAPIAppID, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// addMonthInCurrentYear addMonthInCurrentYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PerformanceIndicatorMonthDataAddMonthInCurrentYearPutAsyncWithHttpInfo(string _4SAPIAppID, PerformanceIndicatorMonthData body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataAddMonthInCurrentYearPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataAddMonthInCurrentYearPut");

            var localVarPath = "/PerformanceIndicatorMonthData/addMonthInCurrentYear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataAddMonthInCurrentYearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?)Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));

        }

        /// <summary>
        /// loadCompetitorValuesForYear loadCompetitorValuesForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>List&lt;PerformanceIndicatorMonthData&gt;</returns>
        public List<PerformanceIndicatorMonthData> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID)
        {
            ApiResponse<List<PerformanceIndicatorMonthData>> localVarResponse = PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutWithHttpInfo(_4SAPIAppID, body, selectedYear, competitorID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// loadCompetitorValuesForYear loadCompetitorValuesForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorMonthData&gt;</returns>
        public ApiResponse<List<PerformanceIndicatorMonthData>> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutWithHttpInfo(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");
            // verify the required parameter 'selectedYear' is set
            if (selectedYear == null)
                throw new ApiException(400, "Missing required parameter 'selectedYear' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");
            // verify the required parameter 'competitorID' is set
            if (competitorID == null)
                throw new ApiException(400, "Missing required parameter 'competitorID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");

            var localVarPath = "/PerformanceIndicatorMonthData/loadCompetitorValuesForYear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selectedYear != null) localVarQueryParams.Add("selectedYear", Configuration.ApiClient.ParameterToString(selectedYear)); // query parameter
            if (competitorID != null) localVarQueryParams.Add("competitorID", Configuration.ApiClient.ParameterToString(competitorID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorMonthData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorMonthData>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorMonthData>)));

        }

        /// <summary>
        /// loadCompetitorValuesForYear loadCompetitorValuesForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>Task of List&lt;PerformanceIndicatorMonthData&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorMonthData>> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutAsync(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID)
        {
            ApiResponse<List<PerformanceIndicatorMonthData>> localVarResponse = await PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutAsyncWithHttpInfo(_4SAPIAppID, body, selectedYear, competitorID);
            return localVarResponse.Data;

        }

        /// <summary>
        /// loadCompetitorValuesForYear loadCompetitorValuesForYear
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selectedYear">selectedYear</param>
        /// <param name="competitorID">competitorID</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorMonthData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorMonthData>>> PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPutAsyncWithHttpInfo(string _4SAPIAppID, List<int?> body, int? selectedYear, int? competitorID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");
            // verify the required parameter 'selectedYear' is set
            if (selectedYear == null)
                throw new ApiException(400, "Missing required parameter 'selectedYear' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");
            // verify the required parameter 'competitorID' is set
            if (competitorID == null)
                throw new ApiException(400, "Missing required parameter 'competitorID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut");

            var localVarPath = "/PerformanceIndicatorMonthData/loadCompetitorValuesForYear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selectedYear != null) localVarQueryParams.Add("selectedYear", Configuration.ApiClient.ParameterToString(selectedYear)); // query parameter
            if (competitorID != null) localVarQueryParams.Add("competitorID", Configuration.ApiClient.ParameterToString(competitorID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataLoadCompetitorValuesForYearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorMonthData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorMonthData>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorMonthData>)));

        }

        /// <summary>
        /// mergeTargetValue mergeTargetValue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns></returns>
        public void PerformanceIndicatorMonthDataMergeTargetValuePut(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null)
        {
            PerformanceIndicatorMonthDataMergeTargetValuePutWithHttpInfo(_4SAPIAppID, body, selYear, selMonth, indicatorId, valueActual, valueGoal, valueBudget, valueForecast, valueSource, comment);
        }

        /// <summary>
        /// mergeTargetValue mergeTargetValue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PerformanceIndicatorMonthDataMergeTargetValuePutWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'selYear' is set
            if (selYear == null)
                throw new ApiException(400, "Missing required parameter 'selYear' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'selMonth' is set
            if (selMonth == null)
                throw new ApiException(400, "Missing required parameter 'selMonth' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'indicatorId' is set
            if (indicatorId == null)
                throw new ApiException(400, "Missing required parameter 'indicatorId' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueActual' is set
            if (valueActual == null)
                throw new ApiException(400, "Missing required parameter 'valueActual' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueGoal' is set
            if (valueGoal == null)
                throw new ApiException(400, "Missing required parameter 'valueGoal' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueBudget' is set
            if (valueBudget == null)
                throw new ApiException(400, "Missing required parameter 'valueBudget' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueForecast' is set
            if (valueForecast == null)
                throw new ApiException(400, "Missing required parameter 'valueForecast' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");

            var localVarPath = "/PerformanceIndicatorMonthData/mergeTargetValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selYear != null) localVarQueryParams.Add("selYear", Configuration.ApiClient.ParameterToString(selYear)); // query parameter
            if (selMonth != null) localVarQueryParams.Add("selMonth", Configuration.ApiClient.ParameterToString(selMonth)); // query parameter
            if (indicatorId != null) localVarQueryParams.Add("indicatorId", Configuration.ApiClient.ParameterToString(indicatorId)); // query parameter
            if (valueActual != null) localVarQueryParams.Add("valueActual", Configuration.ApiClient.ParameterToString(valueActual)); // query parameter
            if (valueGoal != null) localVarQueryParams.Add("valueGoal", Configuration.ApiClient.ParameterToString(valueGoal)); // query parameter
            if (valueBudget != null) localVarQueryParams.Add("valueBudget", Configuration.ApiClient.ParameterToString(valueBudget)); // query parameter
            if (valueForecast != null) localVarQueryParams.Add("valueForecast", Configuration.ApiClient.ParameterToString(valueForecast)); // query parameter
            if (valueSource != null) localVarQueryParams.Add("valueSource", Configuration.ApiClient.ParameterToString(valueSource)); // query parameter
            if (comment != null) localVarQueryParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataMergeTargetValuePut", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// mergeTargetValue mergeTargetValue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PerformanceIndicatorMonthDataMergeTargetValuePutAsync(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null)
        {
            await PerformanceIndicatorMonthDataMergeTargetValuePutAsyncWithHttpInfo(_4SAPIAppID, body, selYear, selMonth, indicatorId, valueActual, valueGoal, valueBudget, valueForecast, valueSource, comment);

        }

        /// <summary>
        /// mergeTargetValue mergeTargetValue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="selYear">selYear</param>
        /// <param name="selMonth">selMonth</param>
        /// <param name="indicatorId">indicatorId</param>
        /// <param name="valueActual">valueActual</param>
        /// <param name="valueGoal">valueGoal</param>
        /// <param name="valueBudget">valueBudget</param>
        /// <param name="valueForecast">valueForecast</param>
        /// <param name="valueSource">valueSource (optional, default to 0)</param>
        /// <param name="comment">comment (optional, default to )</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorMonthDataMergeTargetValuePutAsyncWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? selYear, int? selMonth, int? indicatorId, double? valueActual, double? valueGoal, double? valueBudget, double? valueForecast, int? valueSource = null, string comment = null)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'selYear' is set
            if (selYear == null)
                throw new ApiException(400, "Missing required parameter 'selYear' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'selMonth' is set
            if (selMonth == null)
                throw new ApiException(400, "Missing required parameter 'selMonth' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'indicatorId' is set
            if (indicatorId == null)
                throw new ApiException(400, "Missing required parameter 'indicatorId' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueActual' is set
            if (valueActual == null)
                throw new ApiException(400, "Missing required parameter 'valueActual' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueGoal' is set
            if (valueGoal == null)
                throw new ApiException(400, "Missing required parameter 'valueGoal' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueBudget' is set
            if (valueBudget == null)
                throw new ApiException(400, "Missing required parameter 'valueBudget' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");
            // verify the required parameter 'valueForecast' is set
            if (valueForecast == null)
                throw new ApiException(400, "Missing required parameter 'valueForecast' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataMergeTargetValuePut");

            var localVarPath = "/PerformanceIndicatorMonthData/mergeTargetValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selYear != null) localVarQueryParams.Add("selYear", Configuration.ApiClient.ParameterToString(selYear)); // query parameter
            if (selMonth != null) localVarQueryParams.Add("selMonth", Configuration.ApiClient.ParameterToString(selMonth)); // query parameter
            if (indicatorId != null) localVarQueryParams.Add("indicatorId", Configuration.ApiClient.ParameterToString(indicatorId)); // query parameter
            if (valueActual != null) localVarQueryParams.Add("valueActual", Configuration.ApiClient.ParameterToString(valueActual)); // query parameter
            if (valueGoal != null) localVarQueryParams.Add("valueGoal", Configuration.ApiClient.ParameterToString(valueGoal)); // query parameter
            if (valueBudget != null) localVarQueryParams.Add("valueBudget", Configuration.ApiClient.ParameterToString(valueBudget)); // query parameter
            if (valueForecast != null) localVarQueryParams.Add("valueForecast", Configuration.ApiClient.ParameterToString(valueForecast)); // query parameter
            if (valueSource != null) localVarQueryParams.Add("valueSource", Configuration.ApiClient.ParameterToString(valueSource)); // query parameter
            if (comment != null) localVarQueryParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataMergeTargetValuePut", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>List&lt;PerformanceIndicatorDataReport&gt;</returns>
        public List<PerformanceIndicatorDataReport> PerformanceIndicatorMonthDataSearchReportPut(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID)
        {
            ApiResponse<List<PerformanceIndicatorDataReport>> localVarResponse = PerformanceIndicatorMonthDataSearchReportPutWithHttpInfo(_4SAPIAppID, body, indicatorID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>ApiResponse of List&lt;PerformanceIndicatorDataReport&gt;</returns>
        public ApiResponse<List<PerformanceIndicatorDataReport>> PerformanceIndicatorMonthDataSearchReportPutWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataSearchReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataSearchReportPut");
            // verify the required parameter 'indicatorID' is set
            if (indicatorID == null)
                throw new ApiException(400, "Missing required parameter 'indicatorID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataSearchReportPut");

            var localVarPath = "/PerformanceIndicatorMonthData/searchReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (indicatorID != null) localVarQueryParams.Add("indicatorID", Configuration.ApiClient.ParameterToString(indicatorID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataSearchReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorDataReport>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorDataReport>)));

        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>Task of List&lt;PerformanceIndicatorDataReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<PerformanceIndicatorDataReport>> PerformanceIndicatorMonthDataSearchReportPutAsync(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID)
        {
            ApiResponse<List<PerformanceIndicatorDataReport>> localVarResponse = await PerformanceIndicatorMonthDataSearchReportPutAsyncWithHttpInfo(_4SAPIAppID, body, indicatorID);
            return localVarResponse.Data;

        }

        /// <summary>
        /// searchReport searchReport
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <param name="indicatorID">indicatorID</param>
        /// <returns>Task of ApiResponse (List&lt;PerformanceIndicatorDataReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerformanceIndicatorDataReport>>> PerformanceIndicatorMonthDataSearchReportPutAsyncWithHttpInfo(string _4SAPIAppID, CorporateStructureLink body, int? indicatorID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataSearchReportPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataSearchReportPut");
            // verify the required parameter 'indicatorID' is set
            if (indicatorID == null)
                throw new ApiException(400, "Missing required parameter 'indicatorID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataSearchReportPut");

            var localVarPath = "/PerformanceIndicatorMonthData/searchReport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (indicatorID != null) localVarQueryParams.Add("indicatorID", Configuration.ApiClient.ParameterToString(indicatorID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataSearchReportPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerformanceIndicatorDataReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PerformanceIndicatorDataReport>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerformanceIndicatorDataReport>)));

        }

        /// <summary>
        /// updateMonthValueColumn updateMonthValueColumn
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns></returns>
        public void PerformanceIndicatorMonthDataUpdateMonthValueColumnGet(string _4SAPIAppID, int? targetID, double? value, int? dimension)
        {
            PerformanceIndicatorMonthDataUpdateMonthValueColumnGetWithHttpInfo(_4SAPIAppID, targetID, value, dimension);
        }

        /// <summary>
        /// updateMonthValueColumn updateMonthValueColumn
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PerformanceIndicatorMonthDataUpdateMonthValueColumnGetWithHttpInfo(string _4SAPIAppID, int? targetID, double? value, int? dimension)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");
            // verify the required parameter 'targetID' is set
            if (targetID == null)
                throw new ApiException(400, "Missing required parameter 'targetID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");
            // verify the required parameter 'dimension' is set
            if (dimension == null)
                throw new ApiException(400, "Missing required parameter 'dimension' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");

            var localVarPath = "/PerformanceIndicatorMonthData/updateMonthValueColumn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (targetID != null) localVarQueryParams.Add("targetID", Configuration.ApiClient.ParameterToString(targetID)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (dimension != null) localVarQueryParams.Add("dimension", Configuration.ApiClient.ParameterToString(dimension)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataUpdateMonthValueColumnGet", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// updateMonthValueColumn updateMonthValueColumn
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PerformanceIndicatorMonthDataUpdateMonthValueColumnGetAsync(string _4SAPIAppID, int? targetID, double? value, int? dimension)
        {
            await PerformanceIndicatorMonthDataUpdateMonthValueColumnGetAsyncWithHttpInfo(_4SAPIAppID, targetID, value, dimension);

        }

        /// <summary>
        /// updateMonthValueColumn updateMonthValueColumn
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="targetID">targetID</param>
        /// <param name="value">value</param>
        /// <param name="dimension">dimension</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PerformanceIndicatorMonthDataUpdateMonthValueColumnGetAsyncWithHttpInfo(string _4SAPIAppID, int? targetID, double? value, int? dimension)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");
            // verify the required parameter 'targetID' is set
            if (targetID == null)
                throw new ApiException(400, "Missing required parameter 'targetID' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");
            // verify the required parameter 'dimension' is set
            if (dimension == null)
                throw new ApiException(400, "Missing required parameter 'dimension' when calling PerformanceIndicatorMonthDataApi->PerformanceIndicatorMonthDataUpdateMonthValueColumnGet");

            var localVarPath = "/PerformanceIndicatorMonthData/updateMonthValueColumn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (targetID != null) localVarQueryParams.Add("targetID", Configuration.ApiClient.ParameterToString(targetID)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (dimension != null) localVarQueryParams.Add("dimension", Configuration.ApiClient.ParameterToString(dimension)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceIndicatorMonthDataUpdateMonthValueColumnGet", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
