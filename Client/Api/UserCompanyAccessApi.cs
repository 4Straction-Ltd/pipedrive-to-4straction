/* 
 * ForStraction service API
 *
 * Lead your organisationï¿½s full potential to creating results
 *
 * OpenAPI spec version: 2.0.573622193
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserCompanyAccessApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        int? UserCompanyAccessAddPut (string _4SAPIAppID, UserCompanyAccess body);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> UserCompanyAccessAddPutWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body);
        /// <summary>
        /// changeCurrentCompany
        /// </summary>
        /// <remarks>
        /// changeCurrentCompany
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>UserCompanyAccess</returns>
        UserCompanyAccess UserCompanyAccessChangeCurrentCompanyGet (string _4SAPIAppID, int? toCompanyID);

        /// <summary>
        /// changeCurrentCompany
        /// </summary>
        /// <remarks>
        /// changeCurrentCompany
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>ApiResponse of UserCompanyAccess</returns>
        ApiResponse<UserCompanyAccess> UserCompanyAccessChangeCurrentCompanyGetWithHttpInfo (string _4SAPIAppID, int? toCompanyID);
        /// <summary>
        /// loadCurrentCompanyAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentCompanyAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;UserCompanyAccess&gt;</returns>
        List<UserCompanyAccess> UserCompanyAccessLoadCurrentCompanyAccessesGet (string _4SAPIAppID);

        /// <summary>
        /// loadCurrentCompanyAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentCompanyAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;UserCompanyAccess&gt;</returns>
        ApiResponse<List<UserCompanyAccess>> UserCompanyAccessLoadCurrentCompanyAccessesGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// loadCurrentUserAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentUserAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;UserCompanyAccessReport&gt;</returns>
        List<UserCompanyAccessReport> UserCompanyAccessLoadCurrentUserAccessesGet (string _4SAPIAppID);

        /// <summary>
        /// loadCurrentUserAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentUserAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;UserCompanyAccessReport&gt;</returns>
        ApiResponse<List<UserCompanyAccessReport>> UserCompanyAccessLoadCurrentUserAccessesGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// loadMyAccess
        /// </summary>
        /// <remarks>
        /// loadMyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;UserCompanyAccessReport&gt;</returns>
        List<UserCompanyAccessReport> UserCompanyAccessLoadMyAccessGet (string _4SAPIAppID);

        /// <summary>
        /// loadMyAccess
        /// </summary>
        /// <remarks>
        /// loadMyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;UserCompanyAccessReport&gt;</returns>
        ApiResponse<List<UserCompanyAccessReport>> UserCompanyAccessLoadMyAccessGetWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// searchAndEditCompanyAccess
        /// </summary>
        /// <remarks>
        /// searchAndEditCompanyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        void UserCompanyAccessSearchAndEditCompanyAccessPut (string _4SAPIAppID, UserCompanyAccess body);

        /// <summary>
        /// searchAndEditCompanyAccess
        /// </summary>
        /// <remarks>
        /// searchAndEditCompanyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCompanyAccessSearchAndEditCompanyAccessPutWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> UserCompanyAccessAddPutAsync (string _4SAPIAppID, UserCompanyAccess body);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> UserCompanyAccessAddPutAsyncWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body);
        /// <summary>
        /// changeCurrentCompany
        /// </summary>
        /// <remarks>
        /// changeCurrentCompany
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>Task of UserCompanyAccess</returns>
        System.Threading.Tasks.Task<UserCompanyAccess> UserCompanyAccessChangeCurrentCompanyGetAsync (string _4SAPIAppID, int? toCompanyID);

        /// <summary>
        /// changeCurrentCompany
        /// </summary>
        /// <remarks>
        /// changeCurrentCompany
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>Task of ApiResponse (UserCompanyAccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompanyAccess>> UserCompanyAccessChangeCurrentCompanyGetAsyncWithHttpInfo (string _4SAPIAppID, int? toCompanyID);
        /// <summary>
        /// loadCurrentCompanyAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentCompanyAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;UserCompanyAccess&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompanyAccess>> UserCompanyAccessLoadCurrentCompanyAccessesGetAsync (string _4SAPIAppID);

        /// <summary>
        /// loadCurrentCompanyAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentCompanyAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompanyAccess&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompanyAccess>>> UserCompanyAccessLoadCurrentCompanyAccessesGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// loadCurrentUserAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentUserAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;UserCompanyAccessReport&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompanyAccessReport>> UserCompanyAccessLoadCurrentUserAccessesGetAsync (string _4SAPIAppID);

        /// <summary>
        /// loadCurrentUserAccesses
        /// </summary>
        /// <remarks>
        /// loadCurrentUserAccesses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompanyAccessReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompanyAccessReport>>> UserCompanyAccessLoadCurrentUserAccessesGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// loadMyAccess
        /// </summary>
        /// <remarks>
        /// loadMyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;UserCompanyAccessReport&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompanyAccessReport>> UserCompanyAccessLoadMyAccessGetAsync (string _4SAPIAppID);

        /// <summary>
        /// loadMyAccess
        /// </summary>
        /// <remarks>
        /// loadMyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompanyAccessReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompanyAccessReport>>> UserCompanyAccessLoadMyAccessGetAsyncWithHttpInfo (string _4SAPIAppID);
        /// <summary>
        /// searchAndEditCompanyAccess
        /// </summary>
        /// <remarks>
        /// searchAndEditCompanyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCompanyAccessSearchAndEditCompanyAccessPutAsync (string _4SAPIAppID, UserCompanyAccess body);

        /// <summary>
        /// searchAndEditCompanyAccess
        /// </summary>
        /// <remarks>
        /// searchAndEditCompanyAccess
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCompanyAccessSearchAndEditCompanyAccessPutAsyncWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserCompanyAccessApi : IUserCompanyAccessApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserCompanyAccessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserCompanyAccessApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserCompanyAccessApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserCompanyAccessApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>int?</returns>
        public int? UserCompanyAccessAddPut (string _4SAPIAppID, UserCompanyAccess body)
        {
             ApiResponse<int?> localVarResponse = UserCompanyAccessAddPutWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > UserCompanyAccessAddPutWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessAddPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserCompanyAccessApi->UserCompanyAccessAddPut");

            var localVarPath = "/UserCompanyAccess/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> UserCompanyAccessAddPutAsync (string _4SAPIAppID, UserCompanyAccess body)
        {
             ApiResponse<int?> localVarResponse = await UserCompanyAccessAddPutAsyncWithHttpInfo(_4SAPIAppID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> UserCompanyAccessAddPutAsyncWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessAddPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserCompanyAccessApi->UserCompanyAccessAddPut");

            var localVarPath = "/UserCompanyAccess/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// changeCurrentCompany changeCurrentCompany
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>UserCompanyAccess</returns>
        public UserCompanyAccess UserCompanyAccessChangeCurrentCompanyGet (string _4SAPIAppID, int? toCompanyID)
        {
             ApiResponse<UserCompanyAccess> localVarResponse = UserCompanyAccessChangeCurrentCompanyGetWithHttpInfo(_4SAPIAppID, toCompanyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// changeCurrentCompany changeCurrentCompany
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>ApiResponse of UserCompanyAccess</returns>
        public ApiResponse< UserCompanyAccess > UserCompanyAccessChangeCurrentCompanyGetWithHttpInfo (string _4SAPIAppID, int? toCompanyID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessChangeCurrentCompanyGet");
            // verify the required parameter 'toCompanyID' is set
            if (toCompanyID == null)
                throw new ApiException(400, "Missing required parameter 'toCompanyID' when calling UserCompanyAccessApi->UserCompanyAccessChangeCurrentCompanyGet");

            var localVarPath = "/UserCompanyAccess/changeCurrentCompany";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (toCompanyID != null) localVarQueryParams.Add("toCompanyID", Configuration.ApiClient.ParameterToString(toCompanyID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessChangeCurrentCompanyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompanyAccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompanyAccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompanyAccess)));
            
        }

        /// <summary>
        /// changeCurrentCompany changeCurrentCompany
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>Task of UserCompanyAccess</returns>
        public async System.Threading.Tasks.Task<UserCompanyAccess> UserCompanyAccessChangeCurrentCompanyGetAsync (string _4SAPIAppID, int? toCompanyID)
        {
             ApiResponse<UserCompanyAccess> localVarResponse = await UserCompanyAccessChangeCurrentCompanyGetAsyncWithHttpInfo(_4SAPIAppID, toCompanyID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// changeCurrentCompany changeCurrentCompany
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="toCompanyID">toCompanyID</param>
        /// <returns>Task of ApiResponse (UserCompanyAccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompanyAccess>> UserCompanyAccessChangeCurrentCompanyGetAsyncWithHttpInfo (string _4SAPIAppID, int? toCompanyID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessChangeCurrentCompanyGet");
            // verify the required parameter 'toCompanyID' is set
            if (toCompanyID == null)
                throw new ApiException(400, "Missing required parameter 'toCompanyID' when calling UserCompanyAccessApi->UserCompanyAccessChangeCurrentCompanyGet");

            var localVarPath = "/UserCompanyAccess/changeCurrentCompany";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (toCompanyID != null) localVarQueryParams.Add("toCompanyID", Configuration.ApiClient.ParameterToString(toCompanyID)); // query parameter
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessChangeCurrentCompanyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompanyAccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompanyAccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompanyAccess)));
            
        }

        /// <summary>
        /// loadCurrentCompanyAccesses loadCurrentCompanyAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;UserCompanyAccess&gt;</returns>
        public List<UserCompanyAccess> UserCompanyAccessLoadCurrentCompanyAccessesGet (string _4SAPIAppID)
        {
             ApiResponse<List<UserCompanyAccess>> localVarResponse = UserCompanyAccessLoadCurrentCompanyAccessesGetWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadCurrentCompanyAccesses loadCurrentCompanyAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;UserCompanyAccess&gt;</returns>
        public ApiResponse< List<UserCompanyAccess> > UserCompanyAccessLoadCurrentCompanyAccessesGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessLoadCurrentCompanyAccessesGet");

            var localVarPath = "/UserCompanyAccess/loadCurrentCompanyAccesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessLoadCurrentCompanyAccessesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompanyAccess>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompanyAccess>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompanyAccess>)));
            
        }

        /// <summary>
        /// loadCurrentCompanyAccesses loadCurrentCompanyAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;UserCompanyAccess&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompanyAccess>> UserCompanyAccessLoadCurrentCompanyAccessesGetAsync (string _4SAPIAppID)
        {
             ApiResponse<List<UserCompanyAccess>> localVarResponse = await UserCompanyAccessLoadCurrentCompanyAccessesGetAsyncWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadCurrentCompanyAccesses loadCurrentCompanyAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompanyAccess&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompanyAccess>>> UserCompanyAccessLoadCurrentCompanyAccessesGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessLoadCurrentCompanyAccessesGet");

            var localVarPath = "/UserCompanyAccess/loadCurrentCompanyAccesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessLoadCurrentCompanyAccessesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompanyAccess>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompanyAccess>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompanyAccess>)));
            
        }

        /// <summary>
        /// loadCurrentUserAccesses loadCurrentUserAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;UserCompanyAccessReport&gt;</returns>
        public List<UserCompanyAccessReport> UserCompanyAccessLoadCurrentUserAccessesGet (string _4SAPIAppID)
        {
             ApiResponse<List<UserCompanyAccessReport>> localVarResponse = UserCompanyAccessLoadCurrentUserAccessesGetWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadCurrentUserAccesses loadCurrentUserAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;UserCompanyAccessReport&gt;</returns>
        public ApiResponse< List<UserCompanyAccessReport> > UserCompanyAccessLoadCurrentUserAccessesGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessLoadCurrentUserAccessesGet");

            var localVarPath = "/UserCompanyAccess/loadCurrentUserAccesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessLoadCurrentUserAccessesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompanyAccessReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompanyAccessReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompanyAccessReport>)));
            
        }

        /// <summary>
        /// loadCurrentUserAccesses loadCurrentUserAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;UserCompanyAccessReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompanyAccessReport>> UserCompanyAccessLoadCurrentUserAccessesGetAsync (string _4SAPIAppID)
        {
             ApiResponse<List<UserCompanyAccessReport>> localVarResponse = await UserCompanyAccessLoadCurrentUserAccessesGetAsyncWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadCurrentUserAccesses loadCurrentUserAccesses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompanyAccessReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompanyAccessReport>>> UserCompanyAccessLoadCurrentUserAccessesGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessLoadCurrentUserAccessesGet");

            var localVarPath = "/UserCompanyAccess/loadCurrentUserAccesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessLoadCurrentUserAccessesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompanyAccessReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompanyAccessReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompanyAccessReport>)));
            
        }

        /// <summary>
        /// loadMyAccess loadMyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>List&lt;UserCompanyAccessReport&gt;</returns>
        public List<UserCompanyAccessReport> UserCompanyAccessLoadMyAccessGet (string _4SAPIAppID)
        {
             ApiResponse<List<UserCompanyAccessReport>> localVarResponse = UserCompanyAccessLoadMyAccessGetWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// loadMyAccess loadMyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>ApiResponse of List&lt;UserCompanyAccessReport&gt;</returns>
        public ApiResponse< List<UserCompanyAccessReport> > UserCompanyAccessLoadMyAccessGetWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessLoadMyAccessGet");

            var localVarPath = "/UserCompanyAccess/loadMyAccess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessLoadMyAccessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompanyAccessReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompanyAccessReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompanyAccessReport>)));
            
        }

        /// <summary>
        /// loadMyAccess loadMyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of List&lt;UserCompanyAccessReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompanyAccessReport>> UserCompanyAccessLoadMyAccessGetAsync (string _4SAPIAppID)
        {
             ApiResponse<List<UserCompanyAccessReport>> localVarResponse = await UserCompanyAccessLoadMyAccessGetAsyncWithHttpInfo(_4SAPIAppID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// loadMyAccess loadMyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompanyAccessReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompanyAccessReport>>> UserCompanyAccessLoadMyAccessGetAsyncWithHttpInfo (string _4SAPIAppID)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessLoadMyAccessGet");

            var localVarPath = "/UserCompanyAccess/loadMyAccess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessLoadMyAccessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompanyAccessReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompanyAccessReport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompanyAccessReport>)));
            
        }

        /// <summary>
        /// searchAndEditCompanyAccess searchAndEditCompanyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns></returns>
        public void UserCompanyAccessSearchAndEditCompanyAccessPut (string _4SAPIAppID, UserCompanyAccess body)
        {
             UserCompanyAccessSearchAndEditCompanyAccessPutWithHttpInfo(_4SAPIAppID, body);
        }

        /// <summary>
        /// searchAndEditCompanyAccess searchAndEditCompanyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserCompanyAccessSearchAndEditCompanyAccessPutWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessSearchAndEditCompanyAccessPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserCompanyAccessApi->UserCompanyAccessSearchAndEditCompanyAccessPut");

            var localVarPath = "/UserCompanyAccess/searchAndEditCompanyAccess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessSearchAndEditCompanyAccessPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// searchAndEditCompanyAccess searchAndEditCompanyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCompanyAccessSearchAndEditCompanyAccessPutAsync (string _4SAPIAppID, UserCompanyAccess body)
        {
             await UserCompanyAccessSearchAndEditCompanyAccessPutAsyncWithHttpInfo(_4SAPIAppID, body);

        }

        /// <summary>
        /// searchAndEditCompanyAccess searchAndEditCompanyAccess
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_4SAPIAppID"></param>
        /// <param name="body">New object to be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserCompanyAccessSearchAndEditCompanyAccessPutAsyncWithHttpInfo (string _4SAPIAppID, UserCompanyAccess body)
        {
            // verify the required parameter '_4SAPIAppID' is set
            if (_4SAPIAppID == null)
                throw new ApiException(400, "Missing required parameter '_4SAPIAppID' when calling UserCompanyAccessApi->UserCompanyAccessSearchAndEditCompanyAccessPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserCompanyAccessApi->UserCompanyAccessSearchAndEditCompanyAccessPut");

            var localVarPath = "/UserCompanyAccess/searchAndEditCompanyAccess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_4SAPIAppID != null) localVarHeaderParams.Add("4S-API-App-ID", Configuration.ApiClient.ParameterToString(_4SAPIAppID)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCompanyAccessSearchAndEditCompanyAccessPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
